//
// Names of all functions available, in no particular order.
// Visual Dataflex 17.1 functions
//
// Format:
// <FunctionName> = <Definition> // Comment
//
//========================================================================

// General VDF functions
// =====================

// Math Functions

abs = Abs ( Number nVal ) // The absolute value of a passed value.
acos = Acos ( Real rVal ) // The arc cosine of a passed value.
asin = Asin ( Real rVal ) // The arc sine of a passed value.
atan = Atan ( Real rVal ) // The arc tangent of a passed value.
cos = Cos ( Real rVal ) // The cosine of a passed value.
exp = Exp ( Real rVal ) // The antilogarithm of a passed value.
log = Log ( Real rVal ) // The logarithm of a passed value.
mod = Mod ( Integer iDivident, Integer iDivisor ) // The remainder of the integer division of two passed values.
random = Random ( Integer iLimit ) // A random number.
round = Round ( Number nVal ) // An integer value from a decimal value by rounding the decimal portion.
sin = Sin ( Real rVal ) // The sine of a passed value.
sqrt = Sqrt ( Number nVal ) // The square root of a passed value.
tan = Tan ( Real rVal ) // The tangent of a passed value.

// Array Functions

BinarySearchArray = BinarySearchArray( SearchVal, ArrayId [, ObjectId , MessageId ]) // Returns the index of the first element in the array (or indicated element range) equal to a particular value. 
CopyArray = CopyArray( ArrayId, Integer indexFirst, Integer indexLast ) //Returns array representing a range of elements from the existing array.
CountArray = CountArray( CompareVal} ArrayId, [ObjectId, MessageId] ) // Returns the number of array elements whose value is equal to a test value.
FillArray = FillArray( assignVal, ArrayId [, Integer indexFirst, Integer indexLast ] ) // Fills an array element range with a specified value.
InsertInArray = InsertInArray( ArrayId, Integer index, value ) // Returns an expanded copy of the specified array that includes one new element inserted at the specified index.
MaxArray = MaxArray( ArrayId [, ObjectId , MessageId ] // Returns index of array element with the highest (maximum) value.
MinArray = MinArray( ArrayId [, ObjectId , MessageId ] ) // Returns index of array element with the lowest (minimum) value.
RemoveFromArray = RemoveFromArray( ArrayId, Integer index ) // Returns a contracted copy of the specified array where the element at the specified index is removed.
ResizeArray = ResizeArray( ArrayId, Integer iArraySize [, assignVal ] ) // The ResizeArray function returns a new array that is a copy of the specified array and resized accordingly. 
ReverseArray = ReverseArray( ArrayId ) // Returns array with elements in reverse order of original array.
SearchArray = SearchArray( SearchVal, ArrayId [, ObjectId , MessageId ]) // Returns the index of the first element in the array (or indicated element range) equal to a particular value.
ShuffleArray = ShuffleArray( ArrayId ) // Returns array with elements in shuffled (random) order of original array.
SizeOfArray = SizeOfArray( ArrayId [ DimensionIndex ]  ) // Returns the number of elements in an array or array dimension.
SortArray = SortArray( ArrayId [, ObjectId , MessageId ] ) // Returns array with sorted elements.

// RowID helper functions

GetRowId = GetRowId( hTable ) // Returns the RowId of the currently buffered row of a database table.
DeserializeRowId = DeserializeRowId( String sRowId ) // To deserialize a serialized RowId string back into a RowId data type
FindByRowId = FindByRowId( hTable, RowId ) // Finds a record for a table by its RowId
IsNullRowId = IsNullRowId( RowId ) // Determines if a RowId value is null.
IsSameRowID = IsSameRowID( RowId, RowId ) // Used to determine if two RowId values are the same.
NullRowID = NullRowID() // Sets a RowId variable to Null.
SerializeRowId = SerializeRowId( RowId ) // Serializes a RowId so it can be represented as a String.

// FlexCOM helper functions
IsComObject = IsComObject( variant vComObject ) // Returns True if the passed value is a non-Null IDispatch* value. Otherwise returns False.
IsNullComObject = IsNullComObject( variant vComObject ) // Returns True if the passed variable or property is of type variant IDispatch* and is set to NULL.
IsSameComObject = IsSameComObject( variant vComObject1, variant vComObject2 ) // Returns True if the two parameters are of type variant and point to the same COM object.
NullComObject = NullComObject() // Returns a NULL value of variant type IDispatch*.

// String Functions

Append = Append ( String sHostStr, String sNewStr ) // The concatenation of two strings.
Ascii = Ascii ( String sChar ) // The ASCII value of a character.
center = Center ( String sVal, Integer iLingth ) // A string of specified length with spaces added to, or characters truncated from, both sides so that the content is centered.
Character = Character ( Integer iChar ) // The character corresponding to a specified ASCII number.
CString = CString( String sVal ) // The CString function translates a zero terminated c-string to a standard Visual DataFlex string.
eval = Eval ( String sExpression ) // Calls an evaluation engine to evaluate an expression that is passed as a string. The result of this evaluation is returned.
insert = Insert ( String sNewStr, String sHostStr, Integer iPosition ) // A string made up of one string inserted into another at a specified point.
Left = Left ( String sVal, Integer iLength ) // The leftmost characters of a passed string up to a specified length.
length = Length ( String sVal ) // The length of a string.
lowercase = Lowercase ( String sVal ) // The passed string with all letters converted to lower case.
ltrim = Ltrim ( String sVal ) // The passed string with all leading spaces removed.
Mid = Mid ( String sVal, Integer iLength, Integer iPosition ) // A substring derived from the passed value starting at a specified position and of specified length.
Overstrike= Overstrike ( String sNewVal, String sHostVal, Integer iPosition ) // A string whose value contains a passed substring at a specified location. The substring will overwrite any characters in the original string at the specified location.
pad = Pad ( String sVal, Integer iLength ) // A string of specified length with spaces added to, or truncated from, the right of a passes string.
Pos = Pos ( String sSubStr, String sHostStr ) // The position of the first occurrence of one passed string within another.
Remove = Remove ( String sHostStr, Integer iPosition, Integer iLength ) // A string consisting of the passed string with a specified number of characters removed at a specified location in the string.
Repeat = Repeat ( String sVal, Integer iCount ) // A string made up of a specified number of repetitions of the passed string.
Replace= Replace ( String sOldSubStr, String sHostStr, String sNewSubStr ) // A string with the first occurrence of one passed substring replaced with another.
Replaces = Replaces ( String sOldSubStr, String sHostStr, String sNewSubStr ) // A string with all occurrences of one passed substring replaced with another.
Right = Right ( String sVal, Integer iLength ) // The rightmost characters of a passed string up to a specified length.
RightPos = RightPos( String sub-string, String host-string [, Integer StartingPosition] [, Integer length ] ) // Returns the ordinal position of the last occurrence of a substring in a host string or 0 (zero) if the substring is not found.
rtrim = Rtrim ( String sVal ) // The passed string with all trailing spaces removed.
SFormat = SFormat( String host-string, new-substring-1,....,new-substring-9 ) // Creates a formatted string by replacing markers in a host string (%1, %2, etc.) with sub-string values.
ToANSI = ToANSI( String sValue ) // Converts a string from the OEM character set to the ANSI character set.
ToOEM = ToOEM( String sValue ) // Converts a string from the ANSI character set to the OEM character set.
trim = Trim ( String sVal ) // The passed string with all leading and trailing spaces removed.
uppercase = Uppercase ( String sVal ) // The passed string with all letters converted to upper case.

// Time and Date Functions

CurrentDateTime = CurrentDateTime ( ) // Returns a DateTime variable or Time variable that contains the current local time.
DateGetDay= DateGetDay ( DateTime dtVal ) // Returns the day of the month component of the given DateTime variable dtVar.
DateGetDayOfWeek = DateGetDayOfWeek ( DateTime dtVal ) // Returns the day of the week of the given DateTime variable.
DateGetDayOfYear = DateGetDayOfYear ( DateTime dtVal ) // Returns the day of the year of the given DateTime variable.
DateGetHour = DateGetHour ( DateTime dtVal ) // Returns the hour component of the given DateTime variable.
DateGetMinute = DateGetMinute ( DateTime dtVal ) // Returns the Minute component of the given DateTime variable.
DateGetMonth = DateGetMonth ( DateTime dtVal ) // Returns the Month component of the given DateTime variable.
DateGetSecond = DateGetSecond ( DateTime dtVal ) // Returns the Second component of the given DateTime variable.
DateGetYear = DateGetYear ( DateTime dtVal ) // The DateGetYear function Returns the Year component of the given DateTime variable.
DateSetDay= DateSetDay ( DateTime dtVal, Integer iDay ) // Returns a new DateTime value equal to the passed DateTime with its day adjusted to the passed Day value.
DateSetHour = DateSetHour ( DateTime dtVal, Integer iHour ) // Returns a new DateTime value equal to the passed DateTime with its hour adjusted to the passed Hour value.
DateSetMinute = DateSetMinute ( DateTime dtVal, Integer iMinute ) // Returns a new DateTime value equal to the passed DateTime with its minute adjusted to the passed Minute value.
DateSetMonth = DateSetMonth ( DateTime dtVal, Integer iMonth ) // Returns a new DateTime value equal to the passed DateTime with its month adjusted to the passed Month value.
DateSetSecond = DateSetSecond ( DateTime dtVal, Integer iSecond ) // Returns a new DateTime value equal to the passed DateTime with its seconds adjusted to the passed Seconds value.
DateSetYear = DateSetYear ( DateTime dtVal, Integer iYear ) // Returns a new DateTime value equal to the passed DateTime with its year adjusted to the passed Year value.
IsDateValid = IsDateValid ( DateTime dtVal ) // Returns a Boolean value of 0 if the date is invalid, or 1 if the date is a valid date.
SpanDays = SpanDays ( TimeSpan tsVal ) // Returns the Days component of the given TimeSpan variable.
SpanHours = SpanHours ( TimeSpan tsVal ) // Returns the Hours component of the given TimeSpan variable.
SpanMinutes = SpanMinutes ( TimeSpan tsVal ) // Returns the Minutes component of the given TimeSpan variable.
SpanSeconds = SpanSeconds ( TimeSpan tsVal ) // The SpanSeconds function Returns the Seconds component of the given TimeSpan variable.
SpanTotalDays = SpanTotalDays ( TimeSpan tsVal ) // Calculates the total number of days in the time span and Returns a double precision real number of that amount.
SpanTotalHours 	 = SpanTotalHours ( TimeSpan tsVal ) // Calculates the total number of Hours in the time span and Returns a double precision real number of that amount.
SpanTotalMinutes = SpanTotalMinutes ( TimeSpan tsVal ) // Calculates the total number of Minutes in the time span and Returns a double precision real number of that amount.
SpanTotalSeconds = SpanTotalSeconds ( TimeSpan tsVal ) // Calculates the total number of Seconds in the time span and Returns a double precision real number of that amount.

// Type Convercion Functions

Cast = Cast ( Variable name, Variable type ) // Returns a variable of the specified type that is the best conversion from the original variable.
Convert= Convert ( Variable name, Variable type ) // Returns a variable of the specified type that is the best conversion from the original variable.
Date = Date ( Any value ) // The passed value as a date.
Integer= Integer ( Any value ) // The passed value as an integer.
Number = Number ( Any value ) // The passed value as a number type.
real = Real ( Any value ) // The passed value as a real number.
String = String ( Any value ) // The passed value as a string.

// File I/O Functions
Seq_New_Channel = Seq_New_Channel() // Returns integer. Retrieves the next available sequential input/output (I/O) channel in an organized way.

// Miscellaneous Functions

hi = Hi ( Integer iVal ) // The upper 2-bytes ( 16-bits ) of a 4-byte integer.
If = If ( Boolean Expression, True Expression, False Expression ) // One of two passed values depending on the outcome of a binary expression.
low = Low ( Integer iVal ) // The lower 2-bytes ( 16-bits ) of a 4-byte integer.
Utf8ToOemBuffer = Utf8ToOemBuffer( Pointer pUtf8Buf, Integer iLen ) // Converts a UTF-8 string to OEM.
OemToUtf8Buffer = OemToUtf8Buffer( Pointer pOemBuf, Integer iLen ) // Converts an OEM string to UTF-8.

RefClass = RefClass( ClassName ) // Allows referencing a class name in an undecorated manner.
RefFunc = RefFunc( FunctionName ) // Allows referencing a function name in an undecorated manner.
RefProc = RefProc( ProcedureName ) // Allows referencing a procedure name in an undecorated manner.
RefProcSet = RefProcSet( ProcedureName ) // Allows referencing a property setter method (Procedure Set) name in an undecorated manner.

// Memory management functions

AddressOf = AddressOf ( Variable ONLY ) // Returns the address of an initialized variable.
Alloc = Alloc( Integer iBytesAllocated ) // Returns pointer. Allocates a block of memory.
Free = Free( Pointer pSomeAddress ) // Frees a block of memory.



// Some VDF packages functions
// ===========================

// Key Extensions

Virtual_Key = Virtual_Key ( ) 
Shift_State = Shift_State ( ) 
Reg_Key_Enum = Reg_Key_Enum ( Integer iKey, String szKeyName ) 
Reg_Integer_Value_Enum = Reg_Integer_Value_Enum ( String szKeyName, Integer dwKeyValue ) 
Reg_String_Value_Enum = Reg_String_Value_Enum ( String szKeyName, String szKeyValue ) 


// lowlevel interface to window of object.

Window_Style = Window_Style ( Integer stylemask, Integer and_or ) 
Extended_Window_Style = Extended_Window_Style ( Integer stylemask, Integer and_or ) 
Horz_Scroll_Bar_Visible_State = Horz_Scroll_Bar_Visible_State ( ) // Returns Integer
Current_Item_Color = Current_Item_Color ( ) // Returns Integer
AutoSize_Height_State = AutoSize_Height_State ( ) // Returns Integer
Header_Justification_Mode = Header_Justification_Mode ( Integer Item# ) // Returns Integer
Bitmap_Format = Bitmap_Format ( ) // Returns Integer
Password_State = Password_State ( Integer Item# ) // Returns Integer
Timeout_Value = Timeout_Value ( ) // Returns Integer
Status_Line_Object = Status_Line_Object ( ) // Returns Integer
Windows_Override_State = Windows_Override_State ( ) // Returns Integer
Menu_Handle = Menu_Handle ( ) // Returns Integer
Window_Handle = Window_Handle ( ) // Returns Integer
Container_Handle = Container_Handle ( ) // Returns Integer
GuiSize= GuiSize ( ) // Returns Integer
Client_Size = Client_Size ( ) // Returns Integer
GuiLocation = GuiLocation ( ) // Returns Integer
Form_Window_Handle = Form_Window_Handle ( Integer Itm ) // Returns Integer
Absolute_GuiOrigin = Absolute_GuiOrigin ( ) // Returns Integer
Font = Font ( ) // Returns Integer
Map_Mode = Map_Mode ( ) // Returns Integer
TypeFace = TypeFace ( ) // Returns string
FontSize = FontSize ( ) // Returns Integer
Physical_Fontsize= Physical_Fontsize ( ) // Returns integer
FontItalics = FontItalics ( ) // Returns integer
FontUnderline = FontUnderline ( ) // Returns integer
Border_Style = Border_Style ( ) // Returns integer
Clipping_Mode = Clipping_Mode ( ) // Returns integer
FontWeight= FontWeight ( ) // Returns integer
Map_Ratios= Map_Ratios ( ) // Returns integer
Caption_Bar = Caption_Bar ( ) // Returns integer
Minimize_Icon = Minimize_Icon ( ) // Returns integer
Maximize_Icon = Maximize_Icon ( ) // Returns integer
Sysmenu_Icon = Sysmenu_Icon ( ) // Returns integer
View_mode = View_mode ( ) // Returns integer
Border_width = Border_width ( ) // Returns integer
Scroll_range = Scroll_range ( ) // Returns integer
Pagesize = Pagesize ( ) // Returns integer
Linesize = Linesize ( ) // Returns integer
Column_width = Column_width ( ) // Returns integer
Justification_mode = Justification_mode ( ) // Returns integer
Sorted_state = Sorted_state ( ) // Returns integer
Undo = Undo ( ) // Returns integer
Item_type = Item_type ( Integer param ) // Returns integer
Privateforeignlink = Privateforeignlink ( ) // Returns integer
Foreignlink = Foreignlink ( ) // Returns integer
Ackstate = Ackstate ( ) // Returns integer
Linktemperature = Linktemperature ( ) // Returns integer
Retrycount= Retrycount ( ) // Returns integer
Form_height = Form_height ( Integer Form_number ) // Returns integer
Form_color= Form_color ( Integer Form_number ) // Returns integer
Form_datatype = Form_datatype ( Integer Form_number ) // Returns integer
Form_options = Form_options ( Integer Form_number ) // Returns integer
Form_font = Form_font ( Integer Form_number ) // Returns integer
Form_row = Form_row ( Integer Form_number ) // Returns integer
Form_column = Form_column ( Integer Form_number ) // Returns integer
Form_typeface = Form_typeface ( Integer Form_number ) // Returns String
Form_fontheight = Form_fontheight ( Integer Form_number ) // Returns integer
Form_fontweight = Form_fontweight ( Integer Form_number ) // Returns integer
Form_fontitalics = Form_fontitalics ( Integer Form_number ) // Returns integer
Form_fontunderline = Form_fontunderline ( Integer Form_number ) // Returns integer
Button_aspect = Button_aspect ( Integer Form_number ) // Returns integer
Dde_initiate = Dde_initiate ( Integer remote, String path // Returns integer
Sess_request = Sess_request ( String dataitem ) // Returns String
Sess_receive = Sess_receive ( String dataitem, String buffer ) // Returns integer
Sess_terminate = Sess_terminate ( ) // Returns integer
Sess_execute = Sess_execute ( String commands ) // Returns integer
Sess_connect = Sess_connect ( String app, String topic ) // Returns integer
Sess_read = Sess_read ( String dataitem ) // Returns String
Sess_write= Sess_write ( String dataitem, String buffer ) // Returns integer
Sess_disconnect = Sess_disconnect ( ) // Returns integer
Sess_perform = Sess_perform ( String commands ) // Returns integer
Dde_timeout_value= Dde_timeout_value ( ) // Returns integer
Selected_objectid= Selected_objectid ( ) // Returns integer
Button_aspect = Button_aspect ( Integer Item ) // Returns integer
Button_position = Button_position ( ) // Returns integer
Banded_object = Banded_object ( ) // Returns integer
Auto_align= Auto_align ( ) // Returns integer
Combo_data_object= Combo_data_object ( ) // Returns integer
Combo_list_offset= Combo_list_offset ( ) // Returns integer
Combo_button_offset = Combo_button_offset ( ) // Returns integer
Combo_list_gui_offset = Combo_list_gui_offset ( ) // Returns integer
Combo_button_gui_offset= Combo_button_gui_offset ( ) // Returns integer
Form_guiwidth = Form_guiwidth ( Integer Formwindow ) // Returns integer
Form_guiheight = Form_guiheight ( Integer Formwindow ) // Returns integer
Form_guirow = Form_guirow ( Integer Formwindow ) // Returns integer
Form_guicolumn = Form_guicolumn ( Integer Formwindow ) // Returns integer
Form_margin = Form_margin ( Integer Formwindow ) // Returns integer
User_fontname = User_fontname ( String facename, Integer height ) // Returns integer
Parent_ratios = Parent_ratios ( ) // Returns integer
Banding_object = Banding_object ( ) // Returns integer
Dll_name = Dll_name ( ) // Returns String
Ignore_exit_state= Ignore_exit_state ( ) // Returns integer
Verify_exit_msg = Verify_exit_msg ( ) // Returns integer
Auto_pull_down_state = Auto_pull_down_state ( ) // Returns integer
Action_bar_location = Action_bar_location ( ) // Returns integer
Action_bar_width = Action_bar_width ( ) // Returns integer
Action_bar_keys = Action_bar_keys ( ) // Returns integer
Auto_scale_font_state = Auto_scale_font_state ( ) // Returns integer
Form_Option = ( Integer FormNum, Integer Option ) // Returns Integer
Exit_System_Confirmation = Exit_System_Confirmation ( ) // Returns Integer
Pull_Left_State = Pull_Left_State ( ) // Returns Integer
Text_Extent = Text_Extent ( String TextVal ) // Returns Integer
Mouse_Capture = Mouse_Capture ( ) // Returns Integer
highlight_row_state = highlight_row_state ( ) // Returns integer
highlight_row_color = highlight_row_color ( ) // Returns integer
Header_Visible_State = Header_Visible_State ( ) // Returns Integer
Mapi_Send_Documents = Mapi_Send_Documents ( String pname, String fname ) // Returns Integer
Mapi_InitMessage = Mapi_InitMessage ( String pname, String fname ) // Returns Integer
Mapi_Send_Mail = Mapi_Send_Mail ( Integer flags ) // Returns Integer
Mapi_Address_Book= Mapi_Address_Book ( String caption, Integer flag ) // Returns Integer
Mapi_Find_Next = Mapi_Find_Next ( String Subject, Integer flags ) // Returns String
Mapi_Message_Subject = Mapi_Message_Subject ( ) // Returns String
Mapi_Read_Mail = Mapi_Read_Mail ( String mailid, Integer flags ) // Returns Integer
Mapi_Message_Sendername= Mapi_Message_Sendername ( ) // Returns String
Mapi_Message_DateReceived = Mapi_Message_DateReceived ( ) // Returns String
ImageList_DragObject = ImageList_DragObject ( ) // Returns Integer
ToolTip_State = ToolTip_State ( Integer Form ) // Returns Integer
ToolTip_Value = ToolTip_Value ( Integer Form ) // Returns String
Form_Image_Index = Form_Image_Index ( Integer form ) // Returns Integer
Button_Style = Button_Style ( Integer form ) // Returns Integer
MDI_State = MDI_State ( ) // Returns Integer
MDI_Left_Margin = MDI_Left_Margin ( ) // Returns Integer
MDI_Top_Margin = MDI_Top_Margin ( ) // Returns Integer
MDI_Right_Margin = MDI_Right_Margin ( ) // Returns Integer
MDI_Bottom_Margin= MDI_Bottom_Margin ( ) // Returns Integer
MDI_Window_Pulldown = MDI_Window_Pulldown ( ) // Returns Integer

// Windows' Kernel32 API Functions, Declarations & Constants

CopyMemory= CopyMemory ( Pointer psDest, Pointer psSource, DWORD cChars ) // Returns VOID_TYPE
DeleteFile= DeleteFile ( Pointer lpFileName ) // Returns Integer
FormatMessage = FormatMessage ( dWord dwFlags, Pointer lpSource, dWord dwMessageId, dWord dwLanguageId, Pointer lpBuffer, dWord nSize, Pointer Arguments ) // Returns dWord
FreeLibrary = FreeLibrary ( Integer hInstLib ) // Returns VOID_TYPE
GetFullPathName = GetFullPathName ( String sFileName, DWord nBufferLength, Pointer lpBuffer, Pointer lpFilePart ) // Returns Integer
GetModuleHandle = GetModuleHandle ( String sModule ) // Returns Handle
GetLastError = GetLastError ( ) // Returns Integer
GetFileAttributes= GetFileAttributes ( String sFileName ) // Returns Dword
LoadLibrary = LoadLibrary ( String sFileName ) // Returns Integer
LocalFree = LocalFree ( Handle hMem ) // Returns Integer
LocalLock = LocalLock ( Handle hMem ) // Returns Pointer
LocalUnlock = LocalUnlock ( Handle hMem ) // Returns Integer
GetLocaleInfo = GetLocaleInfo ( DWORD LCID, DWORD LCTYPE, Pointer lpLCDATA, Integer cchData ) // Returns Integer

// WinUser.pkg

AnsiToOem = AnsiToOem ( Pointer lpszAnsi, Pointer lpszOem ) // Returns Integer
AppendMenu= AppendMenu ( Handle hMenu, Integer flags, Integer NewItem, String val ) // Returns Integer
ArrangeIcons = ArrangeIcons ( Handle hWnd ) // Returns Integer
BeginPaint= BeginPaint ( Handle hWnd, Pointer lpPS ) // Returns Handle
ClientToScreen = ClientToScreen ( Handle hWnd, Pointer lpsPoint ) // Returns Integer
CreatePopupMenu = CreatePopupMenu ( ) // Returns Handle
DestroyIcon = DestroyIcon ( Handle hIcon ) // Returns Integer
DrawText = DrawText ( Handle hDC, Pointer lpsz, DWORD cb, Pointer lprc, DWORD fuFormat ) // Returns Integer
EnableMenuItem = EnableMenuItem ( Handle hmenu, Integer uitem, Integer uFlags ) // Returns Integer
EndPaint = EndPaint ( Handle hWnd, Pointer lpPS ) // Returns Handle
FindWindow= FindWindow ( String sClassName, String sCaption ) // Returns Handle
GetAsyncKeyState = GetAsyncKeyState ( DWORD vkey ) // Returns Integer
GetClassLong = GetClassLong ( Integer hWnd, Integer Offset ) // Returns Integer
GetClientRect = GetClientRect ( Handle hwnd, Pointer lprect ) // Returns Integer
GetCursorPos = GetCursorPos ( Pointer lppoint ) // Returns Integer
GetDesktopWindow = GetDesktopWindow ( ) // Returns Handle
GetDC = GetDC ( Handle hWnd ) // Returns Integer
GetKeyboardState = GetKeyboardState ( Pointer lpkeystate ) // Returns Integer
GetKeyState = GetKeyState ( DWORD vkey ) // Returns Integer
GetSysColor = GetSysColor ( DWORD nSysColor ) // Returns DWORD
GetWindowLong = GetWindowLong ( Integer hWnd, Integer offset ) // Returns Integer
GetWindowPlacement = GetWindowPlacement ( Handle hWnd, Pointer lpsWndPl ) // Returns Integer
GetWindowRect = GetWindowRect ( Handle hwnd, Pointer lprect ) // Returns Integer
GetWindow = GetWindow ( Handle hWnd, Integer fuRel ) // Returns Handle
GetWindowText = GetWindowText ( Handle hWnd, Pointer lpsText, Integer cbText ) // Returns Integer
GetWindowWord = GetWindowWord ( Handle hWnd, DWORD nOffset ) // Returns Integer
InitCommonControls = InitCommonControls ( ) // Returns Integer
InvalidateRect = InvalidateRect ( Handle hWnd, Pointer lpRect, DWORD fReDraw ) // Returns Integer
IsClipboardFormatAvailable = IsClipboardFormatAvailable ( DWord dwFormat ) // Returns Integer
LoadCursor= LoadCursor ( Integer hCursor, Pointer ResourceID ) // Returns Integer
LoadImage = LoadImage ( Integer hInst, String sImage, Integer iType, Integer cx, Integer cy, Integer iFlags ) // Returns Handle
LoadResourceCursor = LoadResourceCursor ( Handle hModule, String resid ) // Returns Handle
PostMessage = PostMessage ( Handle hwnd, Handle uMsg, DWORD wParam, DWORD lParam ) // Returns Integer
ReleaseDC = ReleaseDC ( Handle hWnd, Handle hDC ) // Returns Integer
ScreenToClient = ScreenToClient ( Handle hwnd, Pointer lppt ) // Returns Integer
SendMessage = SendMessage ( Handle hwnd, Handle uMsg, DWORD wParam, DWORD lParam ) // Returns Integer
SetCapture= SetCapture ( Handle hWnd ) // Returns Integer
SetClassLong = SetClassLong ( Integer hWnd, Integer Offset, Integer NewLong ) // Returns Integer
SetCursor = SetCursor ( Integer hCursor ) // Returns Integer
SetFocus = SetFocus ( Handle hwnd ) // Returns Integer
SetForegroundWindow = SetForegroundWindow ( Handle hWnd ) // Returns Integer
GetForegroundWindow = GetForegroundWindow ( ) // Returns Integer
SetKeyboardState = SetKeyboardState ( Pointer lpkeystate ) // Returns Integer
SetScrollPos = SetScrollPos ( Handle hWnd, DWORD fnBar, DWORD iPos, DWORD fnReDraw ) // Returns Integer
SetScrollRange = SetScrollRange ( Handle hWnd, DWORD fnBar, DWORD iMin, DWORD iMax, DWORD fnReDraw ) // Returns Integer
SetWindowLong = SetWindowLong ( Handle hwnd, Integer idx, Number wlong ) // Returns Integer
SetWindowPos = SetWindowPos ( Handle hWnd, Handle hWndAfter, Integer x, Integer y, Integer cx, Integer cy, Integer uFlags ) // Returns Integer
SetWindowText = SetWindowText ( Handle hWnd, String sText ) // Returns Integer
ShowWindow= ShowWindow ( Handle hwnd, DWORD flag ) // Returns Integer
TrackPopupMenu = TrackPopupMenu ( Handle hmenu, Integer flags, Integer x, Integer y, Integer res, Handle hWnd, Pointer lprect ) // Returns Integer
WindowFromPoint = WindowFromPoint ( DWORD ptx, DWORD pty ) // Returns Handle
EnableWindow = EnableWindow ( Handle hWnd, Integer bEnable ) // Returns Integer
UpdateWindow = UpdateWindow ( Handle hWnd ) // Returns DWORD
OemToAnsi = OemToAnsi ( Pointer lpszAnsi, Pointer lpszOem ) // Returns Integer
GetSystemMetrics = GetSystemMetrics ( Integer nIndex ) // Returns Integer
SystemParametersInfo = SystemParametersInfo ( Dword uiAction, Dword uiParam, Pointer pvParam, Dword fWinini ) // Returns Integer

// WinHlp.pkg

WinHelpStr= WinHelpStr ( Handle hWnd, String HelpFile, DWORD cmnd, String str ) // Returns Integer
WinHelpCntx = WinHelpCntx ( Handle hWnd, String HelpFile, DWORD cmnd, DWORD cntx ) // Returns Integer

// Wingdi.pkg

GetTextExtent = GetTextExtent ( Handle hDC, Pointer lpString, DWord cbString, Pointer lpSize ) // Returns Integer
MoveTo = MoveTo ( Handle hDC, Integer x, Integer y, Pointer lpPoint ) // Returns Dword
LineTo = LineTo ( Handle hDC, Integer X, Integer Y ) // Returns Integer
Rectangle = Rectangle ( Handle hDC, Integer X1, Integer Y1, Integer X2, Integer Y2 ) // Returns Integer
Ellipse= Ellipse ( Handle hWnd, DWORD x, DWORD y, DWORD xx, DWORD yy ) // Returns Integer
RoundRect = RoundRect ( Handle hWnd, DWORD x, DWORD y, DWORD xx, DWORD yy DWORD xCE DWORD yCE ) // Returns Integer
Polyline = Polyline ( Handle hDC, Pointer lpPolyRect, DWORD dwPoints ) // Returns Integer
GetStockObject = GetStockObject ( Integer nIndex ) // Returns Integer
SelectObject = SelectObject ( Handle hDC, Handle hObject ) // Returns Integer
DeleteObject = DeleteObject ( Handle hObject ) // Returns Integer
CreatePen = CreatePen ( DWORD nPenStyle, DWORD nWidth, Dword crColor ) // Returns Integer
CreateSolidBrush = CreateSolidBrush ( Dword crColor ) // Returns Integer
SetROP2= SetROP2 ( Handle hDC, Integer fuFlag ) // Returns Integer
TextOut= TextOut ( Handle hDC, DWord X, Dword Y, Pointer lpszText, Integer num_bytes ) // Returns Integer
SetBkMode = SetBkMode ( Handle hDC, Integer fuMode ) // Returns Integer
SetTextColor = SetTextColor ( Handle hDC, DWORD crColor ) // Returns DWord

// CommCtrl.pkg

ImageList_SetBkColor = ImageList_SetBkColor ( Handle hImageList, Integer iRgb ) // Returns Integer
ImageList_AddMasked = ImageList_AddMasked ( Handle hImageList, Handle hBitmap, Integer iRgb ) // Returns Integer
ImageList_Create = ImageList_Create ( Integer cx, Integer cy, Integer dwFlags, Integer icInitial, Integer iGrowBy ) // Returns Handle
ImageList_Destroy= ImageList_Destroy ( Integer hImageList ) // Returns Integer
ImageList_GetImageCount= ImageList_GetImageCount ( Integer hImageList ) // Returns Integer
ImageList_Remove = ImageList_Remove ( Integer hImageList, Integer iIndex ) // Returns Integer
ImageList_RemoveAll = ImageList_RemoveAll ( Integer hImageList ) // Returns Integer

