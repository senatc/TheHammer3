//*****************************************************************************************
// Copyright (c) 2000 Michael Kurz
// All rights reserved.
// If you want to use this source in your applications conatct: <MichaelKurz@gmx.at>
//
// $FileName    : cParser.pkg
// $ProjectName : TheTool 1.0
// $Author      : Michael Kurz <MichaelKurz@gmx.at>
// $Created     : 01-25-2001 @ 19:00
//
// Contents:
//      Covers the use of PARSER.DLL which parses TextBuffers for
//          -Object     - End_Object (also  CD_End_Object CD_Popup_Object)
//          -Class      - End_Class
//          -Procedure  - End_Procedure
//          -Function   - End_Function
//          -Use
//          -#Include
//          -Local Vars
//          -Parameters of Procedures and Functions
//
//          also the Compiler directive #IFDEF, #ELSE, #ENDIF
//          are searched to allow to scan some DAF packages which
//          are conditional with these statements.
//          (If not the Parser would see 2 Class Statement where only
//           one is really used)
//
// $Rev History
//
//*****************************************************************************************

Integer ghoCompilerMessages       // Define a global integer for the compiler-output target window
Integer ghoParserControl

Define WM_HOTKEY for |CI$0312  //  0x0312
Define PM_REMOVE for 1

Register_Function CM_GetLineCount Returns Integer

    // Name of the Parameter that contains the return type of a function.
Define MK_RETVAL            For "@RETVAL@"

    // Element types.
Define MK_VARIABLE          For 0   // Only for internal use.
Define MK_OBJECT	          For 1
Define MK_PROCEDURE		      For 2
Define MK_FUNCTION		      For 4
Define MK_CLASS			        For 8
Define MK_PROPERTY          For 16
Define MK_LOCALVAR          For 32
Define MK_SETPROCEDURE      For 64
Define MK_COMMAND           For 128
Define MK_STRUCT            For 256
                            
	// Variable Types
Define MK_INTEGER			      For 1
Define MK_NUMBER 			      For 2
Define MK_STRING 			      For 3
Define MK_HANDLE 			      For 4
Define MK_POINTER			      For 5
Define MK_BOOLEAN			      For 6
Define MK_DWORD			        For 7
	// New Types
Define MK_REAL              For 8
Define MK_DATE              For 9
Define MK_TIME              For 10
Define MK_TIMESPAN          For 11
Define MK_DATETIME          For 12
Define MK_ADDRESS			      For 13
Define MK_BIGINT			      For 14
Define MK_CHAR				      For 15
Define MK_CURRENCY			    For 16
Define MK_DECIMAL		  	    For 17
Define MK_FLOAT			        For 18
Define MK_SHORT			        For 19
Define MK_UBIGINT			      For 20
Define MK_UCHAR			        For 21
Define MK_UINTEGER			    For 22
Define MK_USHORT		  	    For 23
    // Fancy New Types
Define MK_ROWID             For 24
Define MK_VARIANT           For 25


    // Converts a variable type constant to a string name of it.
Function fVarTypToString Global Integer iType Returns String
    If iType Eq MK_INTEGER    Function_Return "Integer"
    If iType Eq MK_NUMBER     Function_Return "Number"
    If iType Eq MK_STRING     Function_Return "String"
    If iType Eq MK_HANDLE     Function_Return "Handle"
    If iType Eq MK_POINTER    Function_Return "Pointer"
    If iType Eq MK_DWORD      Function_Return "DWord"
    If iType Eq MK_REAL       Function_Return "Real"
    If iType Eq MK_DATE       Function_Return "Date"
    If iType Eq MK_TIME       Function_Return "Time"
    If iType Eq MK_TIMESPAN   Function_Return "TimeSpan"
    If iType Eq MK_DATETIME   Function_Return "DateTime"
    If iType Eq MK_ADDRESS    Function_Return "Address"
    If iType Eq MK_BIGINT     Function_Return "BigInt"
    If iType Eq MK_CHAR	      Function_Return "Char"
    If iType Eq MK_CURRENCY	  Function_Return "Currency"
    If iType Eq MK_DECIMAL    Function_Return "Decimal"
    If iType Eq MK_FLOAT      Function_Return "Float"
    If iType Eq MK_SHORT      Function_Return "Short"
    If iType Eq MK_UBIGINT    Function_Return "UBigInt"
    If iType Eq MK_UCHAR      Function_Return "UChar"
    If iType Eq MK_UINTEGER	  Function_Return "UInteger"
    If iType Eq MK_USHORT     Function_Return "UShort"
    If iType Eq MK_ROWID      Function_Return "RowID"
    If iType Eq MK_VARIANT    Function_Return "Variant"
    Function_Return ""
End_Function


Use Bitmaps.pkg     // Contains a function for converting ClassNames to BMPs


    // These are userdefined Window Messages which are sent by the
    // parsing thread to allow rebuild of Lists or whatever.
    // (To display the parsed Elements)
Define WM_USER_MK		      For	(WM_USER+5000)
Define MK_STARTFILLLIST	  For (WM_USER_MK+99 )   // Löscht die Liste(n)
Define MK_NEWLISTENTRY    For (WM_USER_MK+100)   // Fügt neue Einträge hinzu.
Define MK_ENDFILLLIST	    For (WM_USER_MK+101)   // Done with filling the list.
Define MK_NEWUSEDFILE	    For (WM_USER_MK+102)   // New file entry found.
Define MK_GETEDITWINDOW   For (WM_USER_MK+103)   // Current Edit window
                          
Define FF_NEWENTRY        For (WM_USER+5500)     // New FileFinder entry
Define FF_STARTFILEFIND   For (WM_USER+5501)     // New FileFinder entry
Define FF_FINISHFILEFIND  For (WM_USER+5502)     // New FileFinder entry

Define MK_SPYLINE         For (WM_USER+5510)     // Compiler Line
Define MK_SPYNEW          For (WM_USER+5511)     // New compile started

// Easy access to first and last commands
// 28.1.2003 BP
Define MK_CMDFIRST        For MK_STARTFILLLIST
Define MK_CMDLAST         For MK_GETEDITWINDOW

    // A Structure which is used to transfer the Data from DLL to VDF
Type tCElement
    Field tCElement.pNext                as Pointer     // next Element in the List //TYPE: cElement
    Field tCElement.pPrev                as Pointer     // Previous //TYPE: cElement
    Field tCElement.pParent              as Pointer     // Parent //TYPE: cElement
    Field tCElement.pFirstChild          as Pointer     // 1.Child //TYPE: cElement
    Field tCElement.pLastChild           as Pointer     // last Child //TYPE: cElement
    Field tCElement.pItemNr              as Integer     // Is used internally for filling a tree list. //TYPE: int
    Field tCElement.piLine               as Integer     // LineNr. //TYPE: int
    Field tCElement.piEndLine            as Integer     // Endline
    Field tCElement.piType               as Integer     // LineNr. //TYPE: int
    Field tCElement.psName               as Char 200    // Name of the Elements //TYPE: char
    Field tCElement.psClass              as Char 200    // Name of the BaseClass //TYPE: char
    Field tCElement.psRef                as Char 2000   // Complete Reference. seperated with a "." //TYPE: char
End_Type

    // Also used for transferring the Data from DLL to VDF
Type tElementData
    Field tElementData.sName        as Char 200
    Field tElementData.sClass       as Char 200
    Field tElementData.sReferenz    as Char 2000
    Field tElementData.iPrevious    as Dword
    Field tElementData.iParent      as Dword
    Field tElementData.iLineNr      as Dword
    Field tElementData.iType        as Dword
    Field tElementData.pElem        as Pointer
End_Type

    // DLL Calls
External_function MKInit                "MKInit"                PARSER.DLL Handle hWnd Returns Integer
External_function MKUnInit              "MKUnInit"              PARSER.DLL Returns Integer
External_function MKCreateParseTask     "MKCreateParseTask"     PARSER.DLL Handle hwndTreeView Handle hwndEdit Returns Integer
External_function MKDestroyParseTask    "MKDestroyParseTask"    PARSER.DLL Integer pTask Returns Integer
External_function MKSetCurrentParseTask "MKSetCurrentParseTask" PARSER.DLL Integer pTask Returns Integer
External_function MKGetFirstObject      "MKGetFirstObject"      PARSER.DLL Integer pTask Returns Integer
External_function MKGetNextObject       "MKGetNextObject"       PARSER.DLL Integer pObj  Returns Integer
External_function MKGetPreviousObject   "MKGetPreviousObject"   PARSER.DLL Integer pObj  Returns Integer
External_function MKGetFirstChild       "MKGetFirstChild"       PARSER.DLL Integer pObj  Returns Integer
External_function MKGetObjectInfo       "MKGetObjectInfo"       PARSER.DLL Integer pObj  Pointer pName Pointer pClass Returns Integer
External_function MKGetObjectInfoEx     "MKGetObjectInfoEx"     PARSER.DLL Integer pObj  Pointer pData Returns Integer
External_function MKFillList            "MKFillList"            PARSER.DLL Pointer pTask Handle hwnd Returns Integer
External_function MKParseBuffer         "MKParseBuffer"         PARSER.DLL Pointer pBuff Integer iLen Handle hwnd Returns Integer
External_function MKLineToElement       "MKLineToElement"       PARSER.DLL Pointer pTask Integer iForceType Integer iLn  Pointer pData Returns Integer
External_function MKLineToElementObj    "MKLineToElementObj"    PARSER.DLL Pointer pTask Integer iLn  Returns Integer
External_function MKSetLanguage         "MKSetLanguage"         PARSER.DLL Pointer sLanguage  Returns Integer

External_function MKVariablenCount      "MKVariablenCount"      PARSER.DLL Pointer pElement Returns Integer
External_function MKGetVariableInfo     "MKGetVariableInfo"     PARSER.DLL Pointer pElement Integer iNr Pointer pType Pointer pName Returns Integer
External_function MKParameterCount      "MKParameterCount"      PARSER.DLL Pointer pElement Returns Integer
External_function MKGetParameterInfo    "MKGetParameterInfo"    PARSER.DLL Pointer pElement Integer iNr Pointer pType Pointer pName Returns Integer
External_function MKReplyToMessage      "MKReplyToMessage"      PARSER.DLL Integer iVal Returns Integer
External_function MKGetVersionInformation "MKGetVersionInformation" PARSER.DLL Pointer pVersion Pointer pBuild Returns Integer
External_function MKCreateBuffer        "MKCreateBuffer"        PARSER.DLL Integer iSize Returns Integer
External_function MKCancelCurrentParseTask "MKCancelCurrentParseTask" PARSER.DLL Returns Integer
External_function MKSearchText          "MKSearchText"          PARSER.DLL Handle hWnd Pointer pSearch Integer iSearchLen Pointer pFound Returns Integer
External_function SciSearchText         "SciSearchText"         PARSER.DLL Handle hWnd Pointer pSearch Integer iSearchLen Pointer pFound Returns Integer

External_function FFStartFileSearch     "FFStartFileSearch"     PARSER.DLL Pointer pPath Pointer pFilePattern Pointer pFindText Integer bSubDirs Integer bMatchCase Integer bMatchWord Handle hTargetWindow Integer bShowAll Integer bRegExp Returns Integer
External_function FFReplyToMessage      "FFReplyToMessage"      PARSER.DLL Returns Integer
External_function FFCancelFileSearch    "FFCancelFileSearch"    PARSER.DLL Returns Integer

External_function MKSpyCompiler         "MKSpyCompiler"         PARSER.DLL Integer iThreadID Handle hProcess Integer bHideCompiler Returns Integer
External_function MKReplyToSpyMessage   "MKReplyToSpyMessage"   PARSER.DLL Returns Integer
External_function MKAbortCurrentCompile "MKAbortCurrentCompile" PARSER.DLL Returns Integer

External_function FFBrowseFolder        "FFBrowseFolder"        PARSER.DLL Handle hParent Pointer sTitle Pointer sInitDir Pointer pRet Returns Integer
//external_function WaitForSingleObjectEf "WaitForSingleObject" kernel32.dll Handle hObject Integer iTimeout Returns Integer

// dll-function and msg-type needed for removing posted messages from the message queue
// 28.1.2003 BP
Type tMSG
    Field tMsg.hwnd     as Handle
    Field tMsg.message  as Integer
    Field tMsg.wParam   as Integer
    Field tMsg.lParam   as Integer
    Field tMsg.Time     as DWORD
    Field tMsg.ptX      as DWORD
    Field tMsg.ptY      as DWORD
End_Type

External_function PeekMessage      "PeekMessageA"     user32.dll Pointer pMsg Handle hWnd Integer iMin Integer iMax Integer iRemove Returns Integer
External_Function TranslateMessage "TranslateMessage" user32.dll Pointer pMsg Returns Integer
External_Function DispatchMessage  "DispatchMessageA" user32.dll Pointer pMsg Returns Integer


Use cArray2D.pkg

    // This is a source parser that must be inside a GUI container
    // because it needs a window_handle for receiving the WindowMessages
    // from the parsing Thread.
    //
    // The class is not visible or focusable.
Class cParser is a array

    Procedure Construct_Object
      Forward Send Construct_Object

      Property Pointer ppBuffer                   0  // For external Buffer Handling
      Property Integer piBufferLen                0  // Size for this Buffer
      Property Handle  phThread                   0  // Create Thread if not created.
      Property Pointer ppParseTask                0
      Property Integer piCurrObj                  0
                                                  
      Property String  psObjName                  ""
      Property String  psClsName                  ""
                                                  
      Property Integer piListID                   0
      Property Integer piEditID                   0
      Property Integer piLastLineCount            -1

      //Property Integer piTextLenRequested PUBLIC 0

      // Properties receiving the data of an parsing element.
      Property Pointer ppCEl_pNext                0
      Property Pointer ppCEl_pPrev                0
      Property Pointer ppCEl_pParent              0
      Property Integer ppCEl_pFirstChild          0
      Property Integer ppCEl_pLastChild           0
      Property Integer piCEl_pItemNr              0
      Property Integer piCEl_piLine               0
      Property Integer piCEl_piEndLine            0
      Property Integer piCEl_piType               0
      Property String  psCEl_psName               ""
      Property String  psCEl_psClass              ""
      Property String  psCEl_psRef                ""

      //
      // **WvA 11-03-03 The focus_mode property is not supported by the array class
      //       according to VDF8.3 and up.
      //Set Focus_mode to nonfocusable
    End_Procedure

    Procedure End_Construct_Object
        Forward Send End_Construct_Object
        Object oParameter is a cArray2D         // List of the Parameters
        End_Object
        Object oVariablen is a cArray2D         // List of the Variables
        End_Object
        Object oObjects   is a cArray2D         // List of all Objects.
            Set piSortCaseSensitive to False    // Dont sort casesensitiv!!!
        End_Object
        Object oElements  is a cArray2D         // List of all Procedures, Functions, ...
        End_Object
        Object oFunctionCodeTip is a Array
        End_Object
    End_Procedure

    Function SearchBufferForText String sText Returns String
        String sVar1 sVar2
        Pointer pVar1 pVar2
        Integer iRet iSize
        Handle  hoEditWindow
        Boolean bCanParse
        
        Move "" To sVar2
        Get piEditID To hoEditWindow
        If (hoEditWindow<>0) Begin
          Get CanParseCurrentLanguage Of hoEditWindow To bCanParse
          If (bCanParse) Begin
            Move (length(sText)) To iSize
            Move (sText + (Character(0))) To sVar1
            ZeroString 1024 To sVar2
            GetAddress Of sVar1 To pVar1
            GetAddress Of sVar2 To pVar2

#IFDEF TH_SCINTILLA    
            Move (SciSearchText(window_handle(hoEditWindow),pVar1,iSize,pVar2)) To iRet
#ELSE
            Move (MKSearchText(window_handle(hoEditWindow),pVar1,iSize,pVar2)) To iRet
#ENDIF            
            Move (CString(sVar2)) To sVar2
          End
        End
        Function_Return sVar2
    End_Function

        // Delivers an Array(2D) with all ObjectReferences in it.
    Function GetObjectList Returns Integer
        Function_Return (oObjects(self))
    End_Function

        // Gets all parameters of a procedure, function.
    Procedure FillInParameter Pointer pElement Integer hoID
        Integer iCount iC iTyp iRet iItem
        String  sName sTyp
        Pointer pName pTyp
        Move (MKParameterCount(pElement))   To iCount
        Send Delete_Data                    To hoID
        For iC From 0 To (iCount-1)
            Move (Repeat(Character(0),100)) To sName
            GetAddress Of sName             To pName
            Move (Repeat(Character(0),4))   To sTyp
            GetAddress Of sTyp              To pTyp
            Move (MKGetParameterInfo(pElement,iC,pTyp,pName))    To iRet
            Move (CString(sName))           To sName
            Move (BytesToDWord(sTyp,1))     To iTyp
            If sName Ne MK_RETVAL Begin
                Get Item_Count Of hoID To iItem
                Set Value2D Of hoID Item iItem 0   To sName
                Set Value2D Of hoID Item iItem 1   To iTyp
            End
        End
        Send Sort_Items To hoID ascending
    End_Procedure

        // Gets all parameters of a function including retval and unsorted
    Procedure FillInAllParametersUnsorted Pointer pElement Integer hoID
        Integer iCount iC iTyp iRet iItem
        String  sName sTyp sVal
        Pointer pName pTyp
        Move (MKParameterCount(pElement))   To iCount
        Send Delete_Data                    To hoID
        For iC From 0 To (iCount-1)
            Move (Repeat(Character(0),100)) To sName
            GetAddress Of sName             To pName
            Move (Repeat(Character(0),4))   To sTyp
            GetAddress Of sTyp              To pTyp
            Move (MKGetParameterInfo(pElement,iC,pTyp,pName))    To iRet
            Move (CString(sName))           To sName
            Move (BytesToDWord(sTyp,1))     To iTyp
            Move sName                      To sVal
            Get Item_Count Of hoID To iItem
            Set Value2D Of hoID Item iItem 0   To sName
            Set Value2D Of hoID Item iItem 1   To iTyp
        End
    End_Procedure


        // Gets the ParameterList from a Line.
    Function GetParameterListFromLine Integer iLine Returns Integer
        Pointer pElement
        Move (MKLineToElementObj(ppParseTask(Self),iLine))    To pElement
        Send FillInParameter pElement (oParameter(Self))
        Function_Return (oParameter(Self))
    End_Function
        // Gets a list of the parameters from an Element (if its an Procedure,Function)
        // all other its is empty of course.
    Function GetParameterList Pointer pElement Returns Integer
        Send FillInParameter pElement (oParameter(Self))
        Function_Return (oParameter(Self))
    End_Function

        // Gets all local variable of an Element and fills it into an array.
    Procedure FillInVariablen Pointer pElement
        Integer iCount iC hoID iTyp iItem iRet
        String  sName sTyp
        Pointer pName pTyp
        Move (oVariablen(Self))             To hoID
        Move (MKVariablenCount(pElement))   To iCount
        Send Delete_Data                    To hoID
        For iC From 0 To (iCount-1)
            Move (Repeat(Character(0),100)) To sName
            GetAddress Of sName             To pName
            Move (Repeat(Character(0),4))   To sTyp
            GetAddress Of sTyp              To pTyp
            Move (MKGetVariableInfo(pElement,iC,pTyp,pName))    To iRet
            Move (CString(sName))           To sName
            Move (BytesToDWord(sTyp,1))     To iTyp
            If (sName <> "") Begin
              Get Item_Count Of hoID To iItem
              Set Value2D Of hoID Item iItem 0   To sName
              Set Value2D Of hoID Item iItem 1   To iTyp
            End
        End
        Send Sort_Items To hoID ascending
    End_Procedure

        // Gets the VariablenList from a Line.
    Function GetVariablenListFromLine Integer iLine Returns Integer
        Pointer pElement
        Move (MKLineToElementObj(ppParseTask(Self),iLine))    To pElement
        Send FillInVariablen pElement
        Function_Return (oVariablen(Self))
    End_Function

        // Fills in all SubElements of an Element.
    Procedure FillInElementsEx Pointer pElement Integer iType
        Integer hoID iC iSelect
        If pElement Eq 0 Procedure_Return
        Move (oElements(Self))                  To hoID
        Send Delete_Data                        To hoID
        Move (MKGetFirstChild(pElement))        To pElement
        While (pElement<>0)
            Move 1                              To iSelect
            Get Item_Count Of hoID              To iC
            Send FillObjectInfoEx pElement
            If Not (piCEl_piType(Self) Iand iType)  Move 0  To iSelect
            //If (piCEl_piType(Self)) Ne MK_Object    Move 0  To iSelect
            If iSelect Begin
                Set Value2D     Of hoID Item iC 0   To (psCEl_psName(Self))
                Set Value2D     Of hoID Item iC 1   To (piCEl_piType(Self))
                Set Value2D     Of hoID Item iC 2   To (psCEl_psClass(Self))
                Set Value2D     Of hoID Item iC 3   To pElement
            End
            Move (MKGetNextObject(pElement))    To pElement
        End
    End_Procedure
    Procedure FillInElements Pointer pElement
        Send FillInElementsEx pElement (MK_PROCEDURE+MK_FUNCTION+MK_CLASS+MK_PROPERTY+MK_SETPROCEDURE+MK_COMMAND+MK_STRUCT)
    End_Procedure
        // Delivers a List Of all SubElements Of an Element which Is got From
        // the given line.
    Function GetElementsListEx Pointer pElement Integer iType Returns Integer
        Send FillInElementsEx pElement iType
        Function_Return (oElements(self))
    End_Function
    Function GetElementsList Pointer pElement Returns Integer
        Function_Return (GetElementsListEx(self,pElement,(MK_PROCEDURE+MK_FUNCTION+MK_CLASS+MK_PROPERTY+MK_SETPROCEDURE+MK_COMMAND+MK_STRUCT)))
    End_Function



        // Delivers a List of all SubElements of an Element which is got from
        // the given line.
    Function GetElementsListFromLine Integer iLine Returns Integer
        Pointer pElement
        Move (MKLineToElementObj(ppParseTask(Self),iLine))    To pElement
        Send FillInElements pElement
        Function_Return (oElements(Self))
    End_Function

        // Delivers an Element from a given line, the data of
        // the Element is
    Function LineToItemEx Integer iForceType Integer iLn Returns Integer
        Local_Buffer  sData pData tCElement_Size
        Integer iRet iItem iTmp
        String  sTmp
        Move (MKLineToElement(ppParseTask(Self),iForceType,iLn,pData)) To iRet
        If iRet Begin
            GetBuff         From sData At tCElement.pNext           To iTmp
            Set ppCEl_pNext                                         To iTmp
            GetBuff         From sData At tCElement.pPrev           To iTmp
            Set ppCEl_pPrev                                         To iTmp
            GetBuff         From sData At tCElement.pParent         To iTmp
            Set ppCEl_pParent                                       To iTmp
            GetBuff         From sData At tCElement.pFirstChild     To iTmp
            Set ppCEl_pFirstChild                                   To iTmp
            GetBuff         From sData At tCElement.pLastChild      To iTmp
            Set ppCEl_pLastChild                                    To iTmp
            GetBuff         From sData At tCElement.pItemNr         To iTmp
            Set piCEl_pItemNr                                       To iTmp
            GetBuff         From sData At tCElement.piLine          To iTmp
            Set piCEl_piLine                                        To iTmp
            GetBuff         From sData At tCElement.piEndLine       To iTmp
            Set piCEl_piEndLine                                     To iTmp
            GetBuff         From sData At tCElement.piType          To iTmp
            Set piCEl_piType                                        To iTmp
            GetBuff_String  From sData At tCElement.psName          To sTmp
            Set psCEl_psName                                        To (CString(sTmp))
            GetBuff_String  From sData At tCElement.psClass         To sTmp
            Set psCEl_psClass                                       To (CString(sTmp))
            GetBuff_String  From sData At tCElement.psRef           To sTmp
            Set psCEl_psRef                                         To (CString(sTmp))
        End
        Function_Return iRet
    End_Function

        // Doesnt check the type of the current element.
    Function LineToItem Integer iLn Returns Integer
        Function_Return (LineToItemEx(Self,0,iLn))
    End_Function
        // Doesnt check the type of the current element.
        // better name.
    Function LineToElement Integer iLn Returns Integer
        Function_Return (LineToItemEx(Self,0,iLn))
    End_Function

        // Löst ein neu Befüllen der Listen aus.
    Procedure FillLists
        Integer iRet
        Move (MKFillList(ppParseTask(Self),Window_Handle(Self)))    To iRet
    End_Procedure

        // Adding new List Entries.
    Procedure onStartFillList Integer wP Integer lP
        Integer iRet
        Send Delete_Data                       To (oObjects(Self))
        Send delete_data                       To (oFunctionCodeTip(Self))
        If (piListID(Self)) Get msg_StartFillList Of (piListID(Self)) To iRet
        Procedure_Return iRet
    End_Procedure
    Procedure onEndFillList Integer wP Integer lP
        Integer iRet
        If (piListID(Self)) Get msg_EndFillList Of (piListID(Self)) To iRet
        Procedure_Return iRet
    End_Procedure
    Procedure AddNewListEntry String sName String sClass String sRef Integer iParent Integer iPrev Integer iLine Integer iType Integer pElement
        Integer iItemNr iItemCount  iC iVarType
        Integer hoIDParas
        String sVarName sFunction
        If iType Eq  MK_OBJECT Begin
            Move (Item_Count(oObjects(Self)))      To iItemCount
            Set value2D Of (oObjects(Self))        Item iItemCount 0 To (CString(sRef))
            Set value2D Of (oObjects(Self))        Item iItemCount 1 To (CString(sClass))
            Set value2D Of (oObjects(Self))        Item iItemCount 2 To pElement
        End
        // test for parsing local functions for tooltip
//        If iType Eq  MK_FUNCTION Begin
//            Move sName to sFunction
//            Move (oParameter(self)) to hoIDParas
//            Send FillInAllParametersUnsorted pElement hoIDParas
//            If (item_count(hoIDParas)) Gt 1 Move (sFunction + " (") to sFunction
//            Else Move (sFunction + " ( ) ") to sFunction
//            FOR iC From 0 to (Item_Count(hoIDParas)-1)
//                Get value2D Of hoIDParas Item iC 0          to sVarName
//                Get value2D Of hoIDParas Item iC 1          to iVarType
//                If sVarName Ne MK_RETVAL Begin
//                    If iC Ne 0 Move (sFunction + ", ") to sFunction
//                    Move (sFunction + (fVarTypToString(iVarType)) + " " + sVarName) to sFunction
//                End
//            End
//            If (item_count(hoIDParas)) Gt 1 Move (sFunction + ") ") to sFunction
//            Set value Of (oFunctionCodeTip(self)) Item (item_count(oFunctionCodeTip(self))) to sFunction
//        End
        If (piListID(Self)) ;
        Get Msg_AddNewListEntry Of (piListID(Self)) sName sClass sRef iParent iPrev iLine iType pElement To iItemNr
        Procedure_Return iItemNr
    End_Procedure
    Procedure onNewListEntry Integer wP Integer lP
        Integer iResult iParent iPrev iLine iType
        String  sData sName sClass sRef
        Pointer pData pElement

        ZeroType tElementData   To sData
        GetAddress Of sData     To pData
        Move (CopyMemory(pData,wP,tElementData_SIZE))           To iResult
        GetBuff_String From sData  At tElementData.sName        To sName
        GetBuff_String From sData  At tElementData.sClass       To sClass
        GetBuff_String From sData  At tElementData.sReferenz    To sRef
        GetBuff        From sData  At tElementData.iParent      To iParent
        GetBuff        From sData  At tElementData.iPrevious    To iPrev
        GetBuff        From sData  At tElementData.iLineNr      To iLine
        GetBuff        From sData  At tElementData.iType        To iType
        GetBuff        From sData  At tElementData.pElem        To pElement

        Move (CString(sName))   To sName
        Move (CString(sClass))  To sClass
        Move (CString(sRef))    To sRef
        Get Msg_AddNewListEntry sName sClass sRef iParent iPrev iLine iType pElement To iResult
        Procedure_Return iResult
    End_Procedure

    Procedure NewUsedFile String sFile
    End_Procedure
    Procedure onNewUsedFile Integer wP Integer lP
        Integer iRet
        String  sName2
        Local_Buffer sName pName (lP+1)
        Move (CopyMemory(pName,wP,lP))  To iRet
        Move (CString(sName))           To sName
        If Not "." In sName Append sName ".Pkg"
        Get FindFileForWorkspace of ghoWorkspaceHandlerEx sName To sName2
        If sName2 Ne "" Move sName2     To sName
        Else Move ("~FOUND "+sName)     To sName
        If (piListID(Self)) Get msg_NewUsedFile Of (piListID(Self)) sName To iRet
        Procedure_Return iRet
    End_Procedure

        // Saves the Info of a given Object.
    Procedure FillObjectInfo Integer iObj
        Integer iRet
        If iObj Eq 0 Procedure_Return
        Local_Buffer  sName  pName  200
        Local_Buffer  sClass pClass 200
        Move (MKGetObjectInfo(iObj,pName,pClass))   To iRet
        Set psObjName   To sName
        Set psClsName   To sClass
    End_Procedure

        // Fills in all Info of an Element.
    Procedure FillObjectInfoEx Pointer pElement
        If pElement Le 0 Procedure_Return False
        Local_Buffer  sData pData tCElement_Size
        Integer iRet iItem iTmp
        String  sTmp
        Move (MKGetObjectInfoEx(pElement,pData))                    To iRet
        If iRet Begin
            GetBuff         From sData At tCElement.pNext           To iTmp
            Set ppCEl_pNext                                         To iTmp
            GetBuff         From sData At tCElement.pPrev           To iTmp
            Set ppCEl_pPrev                                         To iTmp
            GetBuff         From sData At tCElement.pParent         To iTmp
            Set ppCEl_pParent                                       To iTmp
            GetBuff         From sData At tCElement.pFirstChild     To iTmp
            Set ppCEl_pFirstChild                                   To iTmp
            GetBuff         From sData At tCElement.pLastChild      To iTmp
            Set ppCEl_pLastChild                                    To iTmp
            GetBuff         From sData At tCElement.pItemNr         To iTmp
            Set piCEl_pItemNr                                       To iTmp
            GetBuff         From sData At tCElement.piLine          To iTmp
            Set piCEl_piLine                                        To iTmp
            GetBuff         From sData At tCElement.piEndLine       To iTmp
            Set piCEl_piEndLine                                     To iTmp
            GetBuff         From sData At tCElement.piType          To iTmp
            Set piCEl_piType                                        To iTmp
            GetBuff_String  From sData At tCElement.psName          To sTmp
            Set psCEl_psName                                        To sTmp
            GetBuff_String  From sData At tCElement.psClass         To sTmp
            Set psCEl_psClass                                       To sTmp
            GetBuff_String  From sData At tCElement.psRef           To sTmp
            Set psCEl_psRef                                         To sTmp
        End
        Procedure_Return iRet
    End_Procedure

    Function FindFirstObject Returns Integer
        Integer iObj
        Move (MKGetFirstObject(ppParseTask(Self)))  To iObj
        Set piCurrObj                               To iObj
        Function_Return iObj
    End_Procedure

        // For Debugging issues. Shows all Objects in the List.
    Procedure ShowObject Integer iObj Integer iLevel
        Send FillObjectInfo iObj
        Showln (Repeat(" ",iLevel*3)) (psObjName(Self)) " Class: " (psClsName(Self))
        If (MKGetFirstChild(iObj)) Ne 0 Send ShowObject (MKGetFirstChild(iObj)) (iLevel+1)
        If (MKGetNextObject(iObj)) Ne 0 Send ShowObject (MKGetNextObject(iObj)) (iLevel)
    End_Procedure
    Procedure ShowObjects
        Integer iRoot iObj iObj2
        Get FindFirstObject To iRoot
        Send ShowObject iRoot 0
    End_Procedure
    
    // Tell the parser what language to parse, currently supported is:
    // - DataFlex
    // - Pascal
    Procedure Set Language String sLanguage
      Integer iVoid
      
      Move (sLanguage+character(0)) To sLanguage
      Move (MKSetLanguage(AddressOf(sLanguage))) To iVoid
    End_Procedure

        // Erzeugt den Task.
    Procedure CreateParseTask Integer iEditID
        Handle hwndEdit
        Integer iRet
        If (Not(piEditID(Self))) Set piEditID To iEditID
        If (piEditID(Self)) Get Window_Handle Of (piEditID(Self))   To hwndEdit
        If (ppParseTask(Self)) Ne 0 Procedure_Return
        Move (MKCreateParseTask(Window_Handle(Self),hwndEdit))      To iRet
        Set ppParseTask                                             To iRet
    End_Procedure

        // Parses the Buffer.
    Procedure DoParsing
        Integer iRet
        Send ChangeParseWindow To ghoParserControl (piEditID(Self))
    End_Procedure

    Procedure destroy_object
        Integer iRet
        If ghoParserControl Ne 0 Set phoEditObject Of ghoParserControl To 0
        If (ppParseTask(Self)) Ne 0 Begin
            Move (MKDestroyParseTask(ppParseTask(Self)))           To iRet
            Set ppParseTask To 0
        End
        Forward Send destroy_object
    End_Procedure
End_Class

Class cParserControl is a DFControl
    Register_Procedure OnGetEditWindow Integer wP Integer lP
    Register_Procedure onNewListEntry
    Register_Procedure onStartFillList
    Register_Procedure onEndFillList
    Register_Procedure onNewUsedFile
    Register_Procedure onCompilerLine
    Register_Procedure onNewCompile
    Procedure Construct_Object
        Set External_Class_Name "cParserControl" To "#32770"
        Set external_message MK_GETEDITWINDOW   To OnGetEditWindow
        Set external_message MK_NEWLISTENTRY    To onNewListEntry
        Set external_message MK_STARTFILLLIST   To onStartFillList
        Set external_message MK_ENDFILLLIST     To onEndFillList
        Set external_message MK_NEWUSEDFILE     To onNewUsedFile
        Set external_message MK_SPYLINE         To onCompilerLine
        Set external_message MK_SPYNEW          To onNewCompile
        Forward Send Construct_object
        Property Handle phParseHandle Public 0
        Property Handle phoEditObject Public 0
        Property Integer piLineCountToSet Public 0
        Set focus_mode To nonfocusable
    End_Procedure

    Procedure page_object Integer iPage
        Handle hThread hSignal
        Forward Send page_object iPage
        If (iPage) Begin
            Move (MKInit(window_handle(Self))) To hThread
            If (hThread Eq 0) Send stop_box "Create Parser Thread failed"
            Set phParseHandle To hThread
        End
    End_Procedure

    Procedure destroy_object
        Integer iRet
        Move (MKUninit()) To iRet
        Set phoEditObject To 0
        Forward Send destroy_object
    End_Procedure

    // Removes all Messages from parser.dll that are already posted on the message-queue
    // Important to do so when the parsing thread is changed
    // 28.1.2003 BP
    Procedure RemoveQueuedMessages
        Procedure_Return
        String sMsg
        Pointer pMsg
        Integer iRet
        ZeroType tMsg To sMsg
        GetAddress Of sMsg To pMsg

        While ( (PeekMessage(pMsg,0,MK_CMDFIRST,MK_CMDLAST,1)) )
            Move (MKReplyToMessage(-1)) To iRet
        End
    End_Procedure

    // hoEdit is the DataFlex object that holds the code Editor.
    Procedure ChangeParseWindow Integer hoEdit
        Integer iRet
        Set phoEditObject To 0
        Move (MKCancelCurrentParseTask()) To iRet
        Send RemoveQueuedMessages
        Set phoEditObject To hoEdit
    End_Procedure
    
    //
    // This is an event that is called from the parser DLL
    //
    Procedure OnGetEditWindow Integer wP Integer lP
        Integer iRet iLines iSize
        Boolean bCanParse
        Handle  pBuffer
        Handle  hoParser
        Handle  hoEditWindow
        Handle  hWndEditWindow
        
        Get phoEditObject To hoEditWindow
        If (hoEditWindow = 0) Begin
          Move (MKReplyToMessage(0)) To iRet
          Procedure_Return
        End
        Move (CM_GETLINECOUNT(hoEditWindow)) To iLines
        Get phoParser Of hoEditWindow To hoParser
        If (iLines = (piLastLineCount(hoParser)) ) Begin
          Move (MKReplyToMessage(0)) To iRet
          Procedure_Return
        End
        
        Get CanParseCurrentLanguage Of hoEditWindow To bCanParse
        If (bCanParse=false) Begin
          Move (MKReplyToMessage(0)) To iRet
          Procedure_Return
        End

        Set piLineCountToSet To iLines
        Get Window_Handle Of hoEditWindow To hWndEditWindow
#IFDEF TH_SCINTILLA
        Move (SendMessage(hWndEditWindow, SCI_GETLENGTH,0,0)) to iSize
        Move (MKCreateBuffer(iSize)) To pBuffer   // Creates the buffer straight in the parser DLL, the parser also frees the memory
        Move (SendMessage(hWndEditWindow, SCI_GETTEXT,(iSize+1),pBuffer)) to iRet
#ELSE
        Move (CM_GETTEXTLENGTH(hoEditWindow,0,0)) To iSize
        Move (MKCreateBuffer(iSize)) To pBuffer
        Move (SendMessage(hWndEditWindow, CMM_GETTEXT,  0, pBuffer)) To iRet
#ENDIF
        Move (MKSetCurrentParseTask(ppParseTask(hoParser))) To iRet
        Move (MKReplyToMessage(hWndEditWindow)) To iRet
    End_Procedure

    Procedure onNewListEntry Integer wP Integer lP
        Integer iRet hoParser
        If (phoEditObject(Self)) Eq 0 Begin
            Move (MKReplyToMessage(-1)) To iRet
            Procedure_Return
        End
        Get phoParser Of (phoEditObject(Self)) To hoParser
        Get msg_onNewListEntry Of hoParser wP lP To iRet
        Move (MKReplyToMessage(iRet)) To iRet
    End_Procedure

    Procedure onStartFillList Integer wP Integer lP
        Integer iRet hoParser
        If (phoEditObject(Self)) Eq 0 Begin
            Move (MKReplyToMessage(-1)) To iRet
            Procedure_Return
        End
        Get phoParser Of (phoEditObject(Self)) To hoParser
        Get msg_onStartFillList Of hoParser wP lP To iRet
        Move (MKReplyToMessage(iRet)) To iRet
    End_Procedure

    Procedure onEndFillList Integer wP Integer lP
        Integer iRet hoParser
        If (phoEditObject(Self)) Eq 0 Begin
            Move (MKReplyToMessage(-1)) To iRet
            Procedure_Return
        End
        Get phoParser Of (phoEditObject(Self)) To hoParser
        Get msg_onEndFillList Of hoParser wP lP To iRet
        Set piLastLineCount Of hoParser To (piLineCountToSet(Self))
        Move (MKReplyToMessage(iRet)) To iRet
    End_Procedure

    Procedure onNewUsedFile Integer wP Integer lP
        Integer iRet hoParser
        If (phoEditObject(Self)) Eq 0 Begin
            Move (MKReplyToMessage(-1)) To iRet
            Procedure_Return
        End
        Get phoParser Of (phoEditObject(Self)) To hoParser
        Get msg_onNewUsedFile Of hoParser wP lP To iRet
        Move (MKReplyToMessage(iRet)) To iRet
    End_Procedure

    Procedure OnCompilerLine Integer wP Integer lP
        Integer iRet
        String sBuff
        Pointer pBuff
        ZeroString 1024 To sBuff
        GetAddress Of sBuff To pBuff
        Move (CopyMemory(pBuff,wP,1024)) To iRet
        Move (AnsiToOem(pBuff,pBuff)) To iRet
        Move (cString(sBuff)) To sBuff
        //If ( (ghoCompilerMessages Ne 0) And ((Pos("INCLUDING FILE:",sBuff)) Eq 0) ) Send AddLine to ghoCompilerMessages sBuff
        If (ghoCompilerMessages Ne 0) Send AddLine To ghoCompilerMessages sBuff
        Move (MKReplyToSpyMessage()) To iRet
    End_Procedure

    Procedure OnNewCompile Integer wP Integer lP
        Integer iRet
        If (ghoCompilerMessages Ne 0) Send delete_data To ghoCompilerMessages
        Move (MKReplyToSpyMessage()) To iRet
    End_Procedure
End_Class

Class cFileFinder Is a DFControl
    Register_Procedure FFNewEntry
    Register_Procedure FFStart
    Register_Procedure FFFinish
    Procedure Construct_Object
        Set External_Class_Name "cFileFinder"  To "#32770"
        Set external_message FF_NEWENTRY       To FFNewEntry
        Set external_message FF_STARTFILEFIND  To FFStart
        Set external_message FF_FINISHFILEFIND To FFFinish
        Forward Send Construct_object
        Set focus_mode To nonfocusable
    End_Procedure

    Procedure AddLine String sVal
    End_Procedure
    Procedure OnStart
    End_Procedure
    Procedure OnFinish
    End_Procedure

    Procedure FFNewEntry Integer wP Integer lP
        String sVal
        Pointer pVal
        Integer iRet
        ZeroString wP To sVal
        GetAddress Of sVal To pVal
        Move (CopyMemory(pVal,lP,wP)) To iRet
        Move (AnsiToOem(pVal,pVal)) To iRet
        Move (cString(sVal)) To sVal
        Send AddLine sVal
        Move (FFReplyToMessage()) To iRet
    End_Procedure
    Procedure FFStart Integer wP Integer lP
        Integer iRet
        Send OnStart
        Move (FFReplyToMessage()) To iRet
    End_Procedure
    Procedure FFFinish Integer wP Integer lP
        Integer iRet
        Send OnFinish
        Move (FFReplyToMessage()) To iRet
    End_Procedure
    Procedure RemoveQueuedMessages
        Procedure_Return
        String sMsg
        Pointer pMsg
        Integer iRet
        ZeroType tMsg To sMsg
        GetAddress Of sMsg To pMsg

        While ( (PeekMessage(pMsg,0,FF_NEWENTRY,FF_NEWENTRY,1)) )
            Move (FFReplyToMessage()) To iRet
        End
    End_Procedure

    Procedure CancelFileFind
        Integer iRet
        Move (FFCancelFileSearch()) To iRet
        Send RemoveQueuedMessages
    End_Procedure

    Procedure StartFileFind String sPath String sFilePattern String sFindText Integer bSubFolders Integer bMatchCase Integer bMatchWord Integer bShowAll Integer bRegExp
        Integer iRet hoResult
        Pointer pPath pFilePattern pFindText

        Move (sPath + (Character(0)) ) To sPath
        Move (sFindText + (Character(0)) ) To sFindText
        Move (sFilePattern + (Character(0)) ) To sFilePattern
        GetAddress Of sPath To pPath
        GetAddress Of sFindText To pFindText
        GetAddress Of sFilePattern To pFilePattern
        Move (OemToAnsi(pPath,pPath)) To iRet
        Move (OemToAnsi(pFindText,pFindText)) To iRet
        Move (OemToAnsi(pFilePattern,pFilePattern)) To iRet
        Move (FFStartFileSearch(pPath,pFilePattern,pFindText,bSubFolders,bMatchCase,bMatchWord,(window_handle(Self)),bShowAll,bRegExp)) To iRet
    End_Procedure
End_Class


// Calls the Windows Browse for Folder Window and preselects the passed Directory
// since this can only be done by a callback it must reside in a c dll.
// 28.02.2003 BP
Function SelectFolderWithInit GLOBAL String sTitleText String sInitDir Returns String
    String sDir sTitle sRet
    Pointer pDir pTitle pRet
    Integer iRet
    Move (sTitleText + (Character(0)) ) To sTitle
    Move (sInitDir + (Character(0)) ) To sDir
    GetAddress Of sTitle To pTitle
    GetAddress Of sDir To pDir
    Move (OemToAnsi(pTitle,pTitle)) To iRet
    Move (OemToAnsi(pDir,pDir)) To iRet
    ZeroString 260 To sRet
    GetAddress Of sRet To pRet
    Move (FFBrowseFolder(window_handle(focus(desktop)),pTitle,pDir,pRet)) To iRet
    If (iRet) Begin
        Move (AnsiToOem(pRet,pRet)) To iRet
        Move (cString(sRet)) To sRet
        Function_Return sRet
    End
    Function_Return ""
End_Function

//
// Dispatches the next message in the queue if it is a hotkey
// (a key that combined with the alt-keyboard key)
//
Procedure DispatchHotkey
  Integer iPendingMessage
  Integer iVoid iTranslated
  Pointer pMsg

  String sMsg
  ZeroType tMsg To sMsg
  GetAddress of sMsg To pMsg
  If (PeekMessage(pMsg, 0, 0, 0, PM_REMOVE)) Begin
    GetBuff From sMsg at tMsg.message To iPendingMessage
    If (iPendingMessage = WM_HOTKEY) Begin
      Move (TranslateMessage(pMsg)) To iTranslated
      If (iTranslated) Begin
        Move (DispatchMessage(pMsg))  To iVoid
      End
    End
  End
End_Procedure

//
// Dispatches ANY key press from the loop, not just one, but all of them
//
Procedure DispatchAnyKey
  Integer iPendingMessage
  Integer iVoid iTranslated
  Pointer pMsg

  String sMsg
  ZeroType tMsg To sMsg
  GetAddress of sMsg To pMsg
  If (PeekMessage(pMsg, 0, 0, 0, PM_REMOVE)) Begin
    GetBuff From sMsg at tMsg.message To iPendingMessage
    If (iPendingMessage = WM_HOTKEY or iPendingMessage = WM_KEYDOWN or iPendingMessage = WM_KEYUP) Begin
      Move (TranslateMessage(pMsg)) To iTranslated
      If (iTranslated) Begin
        Move (DispatchMessage(pMsg))  To iVoid
      End
    End
  End
End_Procedure

