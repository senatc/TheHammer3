//TH-Header
//*****************************************************************************************
// Copyright (c)  2001 Michael Kurz
// All rights reserved.
// If you want to use this source in your applications contact: <MichaelKurz@gmx.at> 
//
// $FileName    : cRealToolBar.pkg
// $ProjectName : Mixed Stuff.
// $Author      : Michael Kurz
// $Created     : 10.11.2001  22:04
//
// Contents:
//  A toolbar which allows to adjust the TextColor of the labels and the background color.
//  
//*****************************************************************************************
// Sample of Usage: This Toolbar is working completely like the standard cToolBar
//                  and this sample only discuss' the additional features.
//
//Object oToolBar Is a cRealToolBar
//    Set piclrBtnHighlight       To clWhite          // BorderColor of the Button top and left
//    Set piclrBtnShadow          To clBlack          // BorderColor of the Button bottom and right
//    
//    Set piTextColor             to clBlack          // Color of the Text
//    Set piTextHighlightColor    to clBlue           // Hot color of the text (When the mouse is over a button)
//    Set piBkColor               To clWhite          // Backgroundcolor of the Button
//    Set psBkPatternBmp          To "Pattern2.bmp"   // If set the background of the button is painted with a brush
//                                                    // which is using this bitmap.
//                                                    
//    Set Typeface                to "Times New Roman"    // Font of the Text in the toolbar
//    Set FontHeight              To 15                   // Size of the textfont
//    ...                                           
//End_Object
//TH-RevisionStart
// 10.11.2001 22:05  Created                               Mk     SERVER                    
// 12.11.2001 12:52  Hottrack color support added          Mk     SERVER
//TH-RevisionEnd

Use cToolbar.pkg
Use mPointer.pkg
Use PopupMenu.pkg

Class cButtonsList Is a cPopUpMenu
    Procedure Construct_Object
        Forward Send Construct_Object
        Property Integer Selected_Item Public (-1)
        Set psLabel To "Buttons List"
    End_Procedure

    Procedure DoAction Integer iNr
        Set Selected_Item To iNr
        Forward Send DoAction iNr
    End_Procedure
End_Class

#Replace CREALTOOLBAR_REGISTRY  'AppToolBar'
#Replace CREALTOOLBAR_HOTCOLOR  clBlue

#IFNDEF GET_SETBKCOLOR
External_Function SetBkColor "SetBkColor" Gdi32.dll Handle hdc Integer crColor Returns Integer
#ENDIF
External_Function FillRect   "FillRect"   User32.dll Handle hdc Pointer pRect Handle hBruch Returns Integer   
External_Function CreateBrushIndirect "CreateBrushIndirect" Gdi32.Dll Pointer pLogBrush Returns Integer
#IFNDEF GET_CreateFontIndirect
External_Function CreateFontIndirect  "CreateFontIndirectA"  Gdi32.Dll Pointer pLogFont Returns Integer
#ENDIF
External_Function GetDCOrgEx "GetDCOrgEx" Gdi32.dll Handle hDC Pointer pPoint Returns Integer
External_Function GetViewportOrgEx "GetViewportOrgEx" Gdi32.dll Handle hDC Pointer pPoint Returns Integer
External_Function GetWindowOrgEx "GetWindowOrgEx" Gdi32.dll Handle hDC Pointer pPoint Returns Integer
External_Function GetCurrentPositionEx "GetCurrentPositionEx" Gdi32.dll Handle hDC Pointer pPoint Returns Integer
External_Function GetViewportExtEx "GetViewportExtEx" Gdi32.dll Handle hDC Pointer pPoint Returns Integer
External_Function GetGraphicsMode  "GetGraphicsMode" Gdi32.dll Handle hDC Returns Integer
#IFNDEF GET_GetMapMode
External_Function GetMapMode  "GetMapMode" Gdi32.dll Handle hDC Returns Integer
#ENDIF
External_Function GetBrushOrgEx "GetBrushOrgEx" Gdi32.dll Handle hDC Pointer pPoint Returns Integer
External_Function SetBrushOrgEx "SetBrushOrgEx" Gdi32.Dll Handle hDC Integer iX Integer iY Pointer pPoint Returns Integer



Function DFGetDCOrgEx Global Handle hDC Returns Integer
    Local Integer iRet iX iY
    Local_Buffer sPoint pPoint tPOINT_SIZE
//    move (GetDCOrgEx(hDC,pPoint))   to iRet
//    Move (GetViewportOrgEx(hDC,pPoint)) to iRet
//    Move (GetWindowOrgEx(hDC,pPoint)) to iRet    
//    move (GetCurrentPositionEx(hDC,pPoint))   to iRet
//    move (GetViewportExtEx(hDC,pPoint))   to iRet
//    move (GetViewportExtEx(hDC,pPoint))   to iRet
//    move (GetViewportExtEx(hDC,pPoint))   to iRet
    Move (GetBrushOrgEx(hDC,pPoint))   To iRet

//    Showln "Ret: " iRet
    GetBuff From sPoint At tPoint.x    To iX
    GetBuff From sPoint At tPoint.y    To iY
//    Showln "X: " iX " / " iY
    Function_Return (iX+(iY*65536))
End_Function

// Brush Styles 
Define BS_SOLID            For 0
Define BS_NULL             For 1
Define BS_HOLLOW           For BS_NULL
Define BS_HATCHED          For 2
Define BS_PATTERN          For 3
Define BS_INDEXED          For 4
Define BS_DIBPATTERN       For 5
Define BS_DIBPATTERNPT     For 6
Define BS_PATTERN8X8       For 7
Define BS_DIBPATTERN8X8    For 8
Define BS_MONOPATTERN      For 9
// Hatch Styles
Define HS_HORIZONTAL       For 0
Define HS_VERTICAL         For 1
Define HS_FDIAGONAL        For 2
Define HS_BDIAGONAL        For 3
Define HS_CROSS            For 4
Define HS_DIAGCROSS        For 5

Type tLOGBRUSH
    Field tLOGBRUSH.lbStyle  as Integer // (UINT)
    Field tLOGBRUSH.lbColor  as DWord   // (COLORREF)
    Field tLOGBRUSH.lbHatch  as Integer // (LONG)
End_Type
    // Creates a brush indirect.
Function DFCreateBrushIndirect Global Integer iStyle Integer iColor Integer iHatch Returns Handle
    Local_Buffer sLOGBRUSH pLOGBRUSH tLOGBRUSH_SIZE
    Put iStyle To sLOGBRUSH At tLOGBRUSH.lbStyle
    Put iColor To sLOGBRUSH At tLOGBRUSH.lbColor
    Put iHatch To sLOGBRUSH At tLOGBRUSH.lbHatch
    GetAddress Of sLOGBRUSH To pLOGBRUSH    
    Function_Return (CreateBrushIndirect(pLOGBRUSH))
End_Function




Type tCOLORSCHEME
    Field COLORSCHEME.dwSize          as DWORD   // (DWORD)
    Field COLORSCHEME.clrBtnHighlight as DWord   // (COLORREF)
    Field COLORSCHEME.clrBtnShadow    as DWord   // (COLORREF)
End_Type


Type tNMTBCUSTOMDRAW
    Field tNMTBCUSTOMDRAW.hdr                  as Char tNMHDR_SIZE // (NMHDR)
    Field tNMTBCUSTOMDRAW.dwDrawStage          as DWORD           // (DWORD)
    Field tNMTBCUSTOMDRAW.hdc                  as Handle          // (HDC)
    Field tNMTBCUSTOMDRAW.rc.Left              as DWORD
    Field tNMTBCUSTOMDRAW.rc.top               as DWORD
    Field tNMTBCUSTOMDRAW.rc.Right             as DWORD
    Field tNMTBCUSTOMDRAW.rc.bottom            as DWORD

    Field tNMTBCUSTOMDRAW.dwItemSpec           as Pointer    // (DWORD_PTR)
    Field tNMTBCUSTOMDRAW.uItemState           as Integer    // (UINT)
    Field tNMTBCUSTOMDRAW.lItemlParam          as Integer    // (LPARAM)

    Field tNMTBCUSTOMDRAW.hbrMonoDither        as Handle          // (HBRUSH)
    Field tNMTBCUSTOMDRAW.hbrLines             as Handle          // (HBRUSH)
    Field tNMTBCUSTOMDRAW.hpenLines            as Handle            // (HPEN)
    Field tNMTBCUSTOMDRAW.clrText              as DWord           // (COLORREF)
    Field tNMTBCUSTOMDRAW.clrMark              as DWord           // (COLORREF)
    Field tNMTBCUSTOMDRAW.clrTextHighlight     as DWord           // (COLORREF)
    Field tNMTBCUSTOMDRAW.clrBtnFace           as DWord           // (COLORREF)
    Field tNMTBCUSTOMDRAW.clrBtnHighlight      as DWord           // (COLORREF)
    Field tNMTBCUSTOMDRAW.clrHighlightHotTrack as DWord           // (COLORREF)
    Field tNMTBCUSTOMDRAW.rcText               as Char tRECT_SIZE // (RECT)
    Field tNMTBCUSTOMDRAW.nStringBkMode        as Integer         // (int)
    Field tNMTBCUSTOMDRAW.nHLStringBkMode      as Integer         // (int)
End_Type


Type tLOGFONT
    Field tLOGFONT.lfHeight         as Integer           // (LONG)
    Field tLOGFONT.lfWidth          as Integer          // (LONG)
    Field tLOGFONT.lfEscapement     as Integer          // (LONG)
    Field tLOGFONT.lfOrientation    as Integer          // (LONG)
    Field tLOGFONT.lfWeight         as Integer          // (LONG)
    Field tLOGFONT.lfItalic         as Char 1           // (BYTE)
    Field tLOGFONT.lfUnderline      as Char 1           // (BYTE)
    Field tLOGFONT.lfStrikeOut      as Char 1           // (BYTE)
    Field tLOGFONT.lfCharSet        as Char 1           // (BYTE)
    Field tLOGFONT.lfOutPrecision   as Char 1           // (BYTE)
    Field tLOGFONT.lfClipPrecision  as Char 1           // (BYTE)
    Field tLOGFONT.lfQuality        as Char 1           // (BYTE)
    Field tLOGFONT.lfPitchAndFamily as Char 1           // (BYTE)
    Field tLOGFONT.lfFaceName       as Char 32          // (TCHAR)
End_Type

    // For creating a font with CreateFontIndirect
Class CFontMixin Is a Mixin
        // Insert your Properties here.
    Procedure Define_CFontMixin
             // Font Properties...
        Property Integer plfHeight          Public 0
        Property Integer plfWidth           Public 0
        Property Integer plfEscapement      Public 0
        Property Integer plfOrientation     Public 0
        Property Integer plfWeight          Public 0
        Property Integer plfItalic          Public 0
        Property Integer plfUnderline       Public 0
        Property Integer plfStrikeOut       Public 0
        Property Integer plfCharSet         Public 0
        Property Integer plfOutPrecision    Public 0  
        Property Integer plfClipPrecision   Public 0 
        Property Integer plfQuality         Public 0       
        Property Integer plfPitchAndFamily  Public 0
        Property String  plfFaceName        Public ""                      
    End_Procedure
                         
    Function CreateTheFont Returns Handle
        Local_Buffer sLOGFONT pLOGFONT tLOGFONT_SIZE
        Local Handle hFont
        Put        (plfHeight      (Self))          To sLOGFONT At tLOGFONT.lfHeight
        Put        (plfWidth       (Self))          To sLOGFONT At tLOGFONT.lfWidth
        Put        (plfEscapement  (Self))          To sLOGFONT At tLOGFONT.lfEscapement
        Put        (plfOrientation (Self))          To sLOGFONT At tLOGFONT.lfOrientation                                       
        Put        (plfWeight      (Self))          To sLOGFONT At tLOGFONT.lfWeight                                            
        Put_String (Ascii(plfItalic        (Self))) To sLOGFONT At tLOGFONT.lfItalic
        Put_String (Ascii(plfUnderline     (Self))) To sLOGFONT At tLOGFONT.lfUnderline                                         
        Put_String (Ascii(plfStrikeOut     (Self))) To sLOGFONT At tLOGFONT.lfStrikeOut                                         
        Put_String (Ascii(plfCharSet       (Self))) To sLOGFONT At tLOGFONT.lfCharSet                                           
        Put_String (Ascii(plfOutPrecision  (Self))) To sLOGFONT At tLOGFONT.lfOutPrecision                                      
        Put_String (Ascii(plfClipPrecision (Self))) To sLOGFONT At tLOGFONT.lfClipPrecision                                     
        Put_String (Ascii(plfQuality       (Self))) To sLOGFONT At tLOGFONT.lfQuality                                           
        Put_String (Ascii(plfPitchAndFamily(Self))) To sLOGFONT At tLOGFONT.lfPitchAndFamily                                    
        Put_String (plfFaceName(Self))              To sLOGFONT At tLOGFONT.lfFaceName
        GetAddress Of sLOGFONT                      To pLOGFONT
        Move (CreateFontIndirect(pLOGFONT))         To hFont
        Function_Return hFont
    End_Function
End_Class



Define CDDS_PREPAINT           For |CI$00000001
Define CDDS_POSTPAINT          For |CI$00000002
Define CDDS_PREERASE           For |CI$00000003
Define CDDS_POSTERASE          For |CI$00000004

Define CDDS_ITEM               For |CI$00010000
Define CDDS_ITEMPREPAINT       For (CDDS_ITEM + CDDS_PREPAINT)
Define CDDS_ITEMPOSTPAINT      For (CDDS_ITEM + CDDS_POSTPAINT)
Define CDDS_ITEMPREERASE       For (CDDS_ITEM + CDDS_PREERASE)
Define CDDS_ITEMPOSTERASE      For (CDDS_ITEM + CDDS_POSTERASE)

Define CDRF_DODEFAULT          For |CI$00000000
Define CDRF_NEWFONT            For |CI$00000002
Define CDRF_SKIPDEFAULT        For |CI$00000004
Define CDRF_NOTIFYPOSTPAINT    For |CI$00000010
Define CDRF_NOTIFYITEMDRAW     For |CI$00000020

Define CDIS_SELECTED            For |CI$0001
Define CDIS_GRAYED              For |CI$0002
Define CDIS_DISABLED            For |CI$0004
Define CDIS_CHECKED             For |CI$0008
Define CDIS_FOCUS               For |CI$0010
Define CDIS_DEFAULT             For |CI$0020
Define CDIS_HOT                 For |CI$0040
Define CDIS_MARKED              For |CI$0080
Define CDIS_INDETERMINATE       For |CI$0100

Define CCM_SETCOLORSCHEME      For (CCM_FIRST + 2) // lParam is color scheme
Define CCM_GETCOLORSCHEME      For (CCM_FIRST + 3) // fills in COLORSCHEME pointed
Define CLR_NONE                For |CI$FFFFFFFF
Define CLR_DEFAULT             For |CI$FF000000

Class cRealToolBarImageList Is a cImageList
    Procedure Construct_Object
        Forward Send Construct_Object
        Property Integer piImageListType Public ILC_COLORDDB
        Set piImageHeight To 16
        Set piImageWidth  To 16
    End_Procedure
    Procedure DoCreate
       Integer cx cy dwFlags icInitial iGrowBy iColor

       Get piImageHeight To cy
       Get piImageWidth  To cx
       Get piMaxImages   To iGrowBy
       Get piImageListType To iColor

       Move (iColor+ILC_MASK) To dwFlags

       Set phImageList To (ImageList_Create(cx, cy, dwFlags, 0, iGrowBy))
    End_Procedure
End_Class

Class CRealToolBar Is a cToolBar
    Procedure Construct_Object
        Forward Send Construct_Object
        
        Property Integer piclrBtnHighlight      Public CLR_DEFAULT 
        Property Integer piclrBtnShadow         Public CLR_DEFAULT
        Property Integer piBkColor              Public CLR_DEFAULT  
        Property Integer piBkBrushStyle         Public BS_SOLID
        Property Integer piBkHatchStyle         Public 0
        Property String  psBkPatternBmp         Public ""
        Property Integer piTextColor            Public CLR_DEFAULT
        Property Integer piTextHighlightColor   Public CLR_DEFAULT
//        Property Handle  phBackgroundBrush      Public 0

        Property String  psToolBarName          Public "ToolBar"
        Property Integer Loaded_State           Public False

    End_Procedure
    
    Procedure Notify Integer wParam Integer lParam
        Local Integer iCode iRet iLeft iTop iRight iBottom iItemState iTextColor
        Local Handle  hDC hBrush hBitmap hFont
        Local Integer iDrawStage
        Local String  sBmp
        Local_BUFFER sNMHDR pNMHDR tNMHDR_SIZE                                  // Creates an empty NMHDR String/Pointer combination
        Local_BUFFER sNMCUSTOMDRAWINFO pNMCUSTOMDRAWINFO tNMTBCUSTOMDRAW_SIZE   // Creates an empty NMHDR String/Pointer combination
        
        Move (CopyMemory(pNMHDR,lParam,tNMHDR_SIZE)) To iRet
        GetBuff From sNMHDR At tNMHDR.Code           To iCode
        
        // Customdraw..._______________
        If (iCode=NM_CUSTOMDRAW) Begin
            Move (CopyMemory(pNMCUSTOMDRAWINFO,lParam,tNMTBCUSTOMDRAW_SIZE))    To iRet
            GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.dwDrawStage       To iDrawStage
            GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.uItemState        To iItemState
            If (iDrawStage=CDDS_PREPAINT) Procedure_Return (CDRF_NOTIFYITEMDRAW)
            If (iDrawStage=CDDS_ITEMPREPAINT) Begin // Here we can change the colors and fonts and whatever.
                GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.hdc               To hDC
                

//                Showln "ItemState: " iItemState
                    // Either take texcolor or hottextcolor
                Move (piTextColor(Self))    To iTextColor
                If (iItemState Iand CDIS_HOT) If (piTextHighlightColor(Self)) Ne CLR_DEFAULT Move (piTextHighlightColor(Self))  To iTextColor
                    // Change the Textcolor of the ToolBar, but only if not default.
                If iTextColor Ne CLR_DEFAULT Begin
                    Put iTextColor     To sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.clrText
//                    Put CDIS_HOT     to sNMCUSTOMDRAWINFO at tNMTBCUSTOMDRAW.uItemState
                    GetAddress Of sNMCUSTOMDRAWINFO To pNMCUSTOMDRAWINFO
                    Move (CopyMemory(lParam,pNMCUSTOMDRAWINFO,tNMTBCUSTOMDRAW_SIZE))    To iRet
                End                    
                
                    // Draw a Rect with the backgroundcolor, we want, but only if not default!
                Move (psBkPatternBmp(Self)) To sBmp
                Get_File_Path sBmp          To sBmp
                    // Create a RECT structure.
                Local_Buffer sRect pRect tRECT_SIZE
                GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.rc.Left           To iLeft
                GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.rc.top            To iTop 
                GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.rc.Right          To iRight 
                GetBuff From sNMCUSTOMDRAWINFO At tNMTBCUSTOMDRAW.rc.bottom         To iBottom                
                
//                Showln "Graph: " (GetMapMode(hDC))
//                Showln (Low(DFGetDCOrgEx(hDC))) " / " (Hi(DFGetDCOrgEx(hDC)))
//                Showln iLeft " / " iRight " / " iTop " / " iBottom
//                Showln (SetBrushOrgEx(hDC,0,0,0))
                Move (SetBrushOrgEx(hDC,0,0,0)) To iRet // Needed becouse there is a little bug in ownerdraw which is changing this o 
                Put (iLeft  +2) To sRect At tRECT.Left
                Put (iTop   +2) To sRect At tRECT.Top
                Put (iRight -2) To sRect At tRECT.Right
                Put (iBottom-2) To sRect At tRECT.Bottom
                GetAddress Of sRect To pRect                
                If sBmp Ne "" Begin                                 // Bitmap Pattern in the brush.
                    Move (LoadImage(0, sBmp, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE))      To hBitmap
                    Move (DFCreateBrushIndirect(BS_PATTERN,0,hBitmap))                  To hBrush
                    Move (FillRect(hDC,pRect,hBrush))                                   To iRet
                    Move (DeleteObject(hBrush))                                         To iRet
                    If hBitmap Gt 0 Move (DeleteObject(hBitmap))                        To iRet
                End                     
                Else If ((piBkColor(Self)) Ne CLR_DEFAULT) Begin    // SOLID Brush with background color
                    Move (DFCreateBrushIndirect(piBkBrushStyle(Self),piBkColor(Self),piBkHatchStyle(Self))) To hBrush
                    Move (FillRect(hDC,pRect,hBrush))                                   To iRet
                    Move (DeleteObject(hBrush))                                         To iRet
                End
            End
        End
        Forward Send Notify wParam lParam
    End_Procedure
    
        // Sets the Properties within the WIndows ToolBar
    Procedure SetColorSchemeInt
        Local Integer iHighlightColor iShadowColor
        Local Integer iRet
        Local Handle  hwnd
        Local String  sCOLORSCHEME
        Local Pointer pCOLORSCHEME
        Get piclrBtnHighlight       To iHighlightColor
        Get piclrBtnShadow          To iShadowColor
        ZeroType tCOLORSCHEME       To sCOLORSCHEME
        Put tCOLORSCHEME_SIZE       To sCOLORSCHEME At COLORSCHEME.dwSize                                          
        Put iHighlightColor         To sCOLORSCHEME At COLORSCHEME.clrBtnHighlight                                 
        Put iShadowColor            To sCOLORSCHEME At COLORSCHEME.clrBtnShadow
        GetAddress Of sCOLORSCHEME  To pCOLORSCHEME
        Move (window_Handle(Self))  To hwnd
        Move (SendMessage(hwnd,TB_SETCOLORSCHEME,0,pCOLORSCHEME))   To iRet
    End_Procedure    
        // Sets the properties and if already paged updates them inside the ToolBar.    
    Procedure Set ColorScheme Integer iHighlightColor Integer iShadowColor
        Set piclrBtnHighlight   To iHighlightColor 
        Set piclrBtnShadow      To iShadowColor
        If (Window_Handle(Self)) 
        Send SetColorSchemeInt
    End_Procedure
        // Set the colors schema after the Window was created.
    Function mName String sObj Returns String
        Local String sName
        Move "" To sName
        If (sObj<>"") Begin
            While "." In sObj
                Pos "." In sObj
                Left sObj To sName
                Replace sName In sObj with ""
            Loop
            Move sObj To sName
        End
        Function_Return sName
    End_Function
    
    Procedure Load_Registry
        Local Integer iHLC iLbl
        Local Integer icButton iButton hoButton iVisible iStyle
        Local String  sName
//        Get Load_Options "HotTrack" To iHLC
//        If (iHLC) Set piTextHighlightColor To CREALTOOLBAR_HOTCOLOR
//        Else      Set piTextHighlightColor To CLR_DEFAULT
//        Get Load_Options "ShowLabels" To iLbl
//        Set pbShowLabels To (Not(iLbl))

        Get NumberOfButtons To icButton
        For iButton From 0 To (icButton -1)
            Get ObjectFromIndex Of (phoButtons(Self)) iButton To hoButton
            Get mName (name(hoButton)) To sName
            Get Load_Options sName To iVisible
            If (Not(iVisible)) Set pbVisible Of hoButton To True
            Else               Set pbVisible Of hoButton To False
            Get peStyle Of hoButton To iStyle
            If (iStyle<>bsSeparator) Set pbEnabled Of hoButton To True
        Loop            
        Set Loaded_State To True
    End_Procedure
    
    Procedure Paint
        Forward Send Paint
        If (NumberOfButtons(Self)) Begin
            If (Not(Loaded_State(Self))) Send Load_Registry
        End
    End_Procedure
    
    Procedure RefreshToolBar
    End_Procedure
    
    Procedure mName
        Local String sObj
        Get mName (Name(Self)) To sObj
        If (sObj<>"") Set psToolBarName To sObj
    End_Procedure
        
    Procedure Page Integer iFlag
        Forward Send Page iFlag
        Send SetColorSchemeInt
        Send mName
    End_Procedure    

    Procedure Save_Options String sProfile String sData
        Local String sKey
        Get_Profile_String "WorkSpaces" "CurrentWorkspace" To sKey
        Set_Profile_String ("WorkSpaces\"+sKey+"\"+CREALTOOLBAR_REGISTRY+"\"+(psToolBarName(Self))) sProfile To sData
    End_Procedure
    
    Function Load_Options String sProfile Returns String
        Local String sKey sData
        Get_Profile_String "WorkSpaces" "CurrentWorkspace" To sKey
        Get_Profile_String ("WorkSpaces\"+sKey+"\"+CREALTOOLBAR_REGISTRY+"\"+(psToolBarName(Self))) sProfile To sData
        Function_Return sData
    End_Function
    
//    Procedure End_Construct_Object
//        Local Integer iHLC iLbl
//        Get Load_Options "HotTrack" To iHLC
//        If (iHLC) Set piTextHighlightColor To CREALTOOLBAR_HOTCOLOR
//        Else      Set piTextHighlightColor To CLR_DEFAULT
//        Get Load_Options "ShowLabels" To iLbl
//        Set pbShowLabels To (Not(iLbl))
//        Forward Send End_Construct_Object
//    End_Procedure
    
End_Class
