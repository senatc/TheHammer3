//TH-Header
//*****************************************************************************************
// Copyright (c)  2001 Michael Kurz
// All rights reserved.
// If you want to use this source in your applications conatct: <MichaelKurz@gmx.at>
//
// $FileName    : cButtonEx.pkg
// $ProjectName : Shared Classes
// $Author      : Michael Kurz
// $Created     : 09.05.2001  08:46
//
// Contents:
//  Subclass for the Windows BUTTON class, supports all features like a std.DF button does.
//  Only on_item command does not work within it.
//
// Sample of Usage:
//    Object oButton Is a cButton
//        Set Location            To 0  0
//        Set size                To 45 80
//        Set piMultiLineState    To True                   // Wrap Text when to long.
//        Set piJustificationMode To (Jmode_left+jmode_top) // Supports: Jmode_Left | Jmode_Right | Jmode_Center | Jmode_Top | Jmode_Bottom | Jmode_VCenter
//        Set Label To "Testa assa as asas asa asa s"       // Label as usual, but "\n" for beginning a new line is supported (only if piMultiline_State=TRUE)
//        Set Bitmap To "Panel32.bmp"                       // You can either use a Bitmap
//        Set Icon to "Editor.Ico"                          // or an Icon
//        Set Object_Shadow_State to TRUE | FALSE           // Shadowing is also supported.
//
//        Procedure onClick
//            Send Info_Box "Test"
//        End_Procedure
//    End_Object
//

//
//*****************************************************************************************
//TH-RevisionStart
//TH-RevisionEnd

//____Button_Styles..._____________________
Define BS_PUSHBUTTON       For |CI$00000000
Define BS_DEFPUSHBUTTON    For |CI$00000001
Define BS_CHECKBOX         For |CI$00000002
Define BS_AUTOCHECKBOX     For |CI$00000003
Define BS_RADIOBUTTON      For |CI$00000004
Define BS_3STATE           For |CI$00000005
Define BS_AUTO3STATE       For |CI$00000006
Define BS_GROUPBOX         For |CI$00000007
Define BS_USERBUTTON       For |CI$00000008
Define BS_AUTORADIOBUTTON  For |CI$00000009
Define BS_OWNERDRAW        For |CI$0000000B
Define BS_LEFTTEXT         For |CI$00000020
Define BS_TEXT             For |CI$00000000
Define BS_ICON             For |CI$00000040
Define BS_BITMAP           For |CI$00000080
Define BS_LEFT             For |CI$00000100
Define BS_RIGHT            For |CI$00000200
Define BS_CENTER           For |CI$00000300
Define BS_TOP              For |CI$00000400
Define BS_BOTTOM           For |CI$00000800
Define BS_VCENTER          For |CI$00000C00
Define BS_PUSHLIKE         For |CI$00001000
Define BS_MULTILINE        For |CI$00002000
Define BS_NOTIFY           For |CI$00004000
Define BS_FLAT             For |CI$00008000
Define BS_RIGHTBUTTON      For BS_LEFTTEXT

//____Btn_Notification_Messages..._________
Define BN_CLICKED          For 0
Define BN_PAINT            For 1
Define BN_HILITE           For 2
Define BN_UNHILITE         For 3
Define BN_DISABLE          For 4
Define BN_DOUBLECLICKED    For 5
Define BN_PUSHED           For BN_HILITE
Define BN_UNPUSHED         For BN_UNHILITE
Define BN_DBLCLK           For BN_DOUBLECLICKED
Define BN_SETFOCUS         For 6
Define BN_KILLFOCUS        For 7

//____Button Control Messages...______
Define BM_GETCHECK        For |CI$00F0
Define BM_SETCHECK        For |CI$00F1
Define BM_GETSTATE        For |CI$00F2
Define BM_SETSTATE        For |CI$00F3
Define BM_SETSTYLE        For |CI$00F4
Define BM_CLICK           For |CI$00F5
Define BM_GETIMAGE        For |CI$00F6
Define BM_SETIMAGE        For |CI$00F7

Define BST_UNCHECKED      For |CI$0000
Define BST_CHECKED        For |CI$0001
Define BST_INDETERMINATE  For |CI$0002
Define BST_PUSHED         For |CI$0004
Define BST_FOCUS          For |CI$0008

//Define TME_HOVER               For |CI$00000001
//Define TME_LEAVE               For |CI$00000002

//Type cfTRACKMOUSEEVENT
//    Field cfTRACKMOUSEEVENT.cbSize          as DWORD     // (DWORD)
//    Field cfTRACKMOUSEEVENT.dwFlags         as DWORD     // (DWORD)
//    Field cfTRACKMOUSEEVENT.hwndTrack       as Handle    // (HWND)
//    Field cfTRACKMOUSEEVENT.dwHoverTime     as DWORD     // (DWORD)
//End_Type

TYPE DRAWITEMSTRUCT
    Field DRAWITEMSTRUCT.CtlType        as Integer      // (UINT)
    Field DRAWITEMSTRUCT.CtlID          as Integer      // (UINT)
    Field DRAWITEMSTRUCT.itemID         as Integer      // (UINT)
    Field DRAWITEMSTRUCT.itemAction     as Integer      // (UINT)
    Field DRAWITEMSTRUCT.itemState      as Integer      // (UINT)
    Field DRAWITEMSTRUCT.hwndItem       as Handle      // (HWND)
    Field DRAWITEMSTRUCT.hDC            as Handle    // (HDC)
    Field DRAWITEMSTRUCT.rcItemTop      as Integer   // (RECT)
    Field DRAWITEMSTRUCT.rcItemLeft     as Integer   // (RECT)
    Field DRAWITEMSTRUCT.rcItemBottom   as Integer   // (RECT)
    Field DRAWITEMSTRUCT.rcItemRight    as Integer    // (RECT)
    Field DRAWITEMSTRUCT.itemData       as Pointer // (ULONG_PTR)
End_Type

Define ODA_DRAWENTIRE  For |CI$0001
Define ODA_SELECT      For |CI$0002
Define ODA_FOCUS       For |CI$0004

Define ODS_SELECTED    For |CI$0001
Define ODS_GRAYED      For |CI$0002
Define ODS_DISABLED    For |CI$0004
Define ODS_CHECKED     For |CI$0008
Define ODS_FOCUS           For |CI$0010
// IF(WINVER >= 0x0400)
Define ODS_DEFAULT         For |CI$0020
Define ODS_COMBOBOXEDIT    For |CI$1000
// #IF(WINVER >= 0x0500)
Define ODS_HOTLIGHT        For |CI$0040
Define ODS_INACTIVE        For |CI$0080
// #IF(_WIN32_WINNT >= 0x0500)
Define ODS_NOACCEL         For |CI$0100
Define ODS_NOFOCUSRECT     For |CI$0200

Define DC_BRUSH            For 18
Define DC_PEN              For 19

External_function SetDCPenColor "SetDCPenColor" GDI32.DLL Handle hdc Integer iColor Returns Integer
External_function SetBkColor    "SetBkColor" GDI32.dll Handle hDC DWORD crColor Returns DWord

Use mBitmapStuff.pkg

Class cWinButton Is a cWinControl
    Register_Procedure onMouseMove
    Register_Procedure onMouseLeave
    Procedure Construct_Object
        Set external_class_name "DFWINBUTTON"       To "BUTTON"
        Set external_message WM_MOUSEMOVE           To Wmsg_onMouseMove
        Set external_message WM_MOUSELEAVE          To Wmsg_onMouseLeave
        Set external_message WM_DRAWITEM            To Wmsg_onDrawItem
        //
        Property String  psBitmap               Public ""
        Property String  psIcon                 Public ""
        //

        Property Integer piShadowState          Public 0
        Property Integer piMultiLineState       Public False
        Property Integer piJustificationMode    Public (jmode_center+jmode_vcenter)
        Property Integer piBitmapHandle         Public 0
        Property Integer piIconHandle           Public 0
        Property Integer piTransparentState     Public 0    // For Bitmaps and Icons.
        Property Integer piFlatState            Public 0    // Flat State
        Property Integer piMouseTracking        Public False
        Set Typeface To (TypeFace(Self))        // Dont know why, but this is needed!
        Forward Send Construct_Object
    End_Procedure
        // For setting the value.
    Procedure Set Label String sLabel
        String sCR sCur
        Move (sCR+Character(13)+Character(10)) To sCR
        Move (Replaces("\n",sLabel,sCR)) To sLabel
        Get Label To sCur
        If (sCur<>sLabel) Set value Item 0 To sLabel
    End_Procedure
    Function Label Returns String
        Function_Return (Value(Self, 0))
    End_Function
        // Sets all Styles and other necc. things.
    Procedure page Integer iFlag
        Integer iRet
        Handle hwnd
//        If (piMultiLineState(Self))                             Set Window_Style BS_MULTILINE   To True
//        If (piFlatState(Self))                                  Set Window_Style BS_FLAT        To True
//        If      (piJustificationMode(Self) Iand jmode_right)    Set Window_Style BS_RIGHT       To True
//        Else If (piJustificationMode(Self) Iand jmode_center)   Set Window_Style BS_CENTER      To True
//        Else                                                    Set Window_Style BS_LEFT        To True
//        If      (piJustificationMode(Self) Iand jmode_Bottom)   Set Window_Style BS_BOTTOM      To True
//        Else If (piJustificationMode(Self) Iand jmode_Top)      Set Window_Style BS_TOP         To True
//        Else                                                    Set Window_Style BS_VCENTER     To True
//        If (piBitmapHandle(Self))                               Set Window_Style BS_BITMAP      To True
//        If (piIconHandle(Self))                                 Set Window_Style BS_ICON        To True
                                                                Set Window_Style BS_OWNERDRAW   To True
        Forward Send page iFlag
        Send Update_Button
        Get Window_Handle To hwnd
        Move (EnableWindow(hwnd,(Not(piShadowState(Self)))))  To iRet
    End_Procedure

    Procedure Update_Button
        Integer iRet hWnd
        Get Window_Handle To hwnd
        If (piBitmapHandle(Self)) Move (SendMessage(hwnd,BM_SETIMAGE,IMAGE_BITMAP,piBitmapHandle(Self))) To iRet
        If (piIconHandle(Self))   Move (SendMessage(hwnd,BM_SETIMAGE,IMAGE_ICON,piIconHandle(Self)))     To iRet
    End_Procedure
        // Shadowing Object.
    Procedure Set Object_Shadow_State Integer iFlag
        Integer iRet
        Set piShadowState   To iFlag
        If (Focus_Mode(Self)) Ne pointer_only Begin
            If iFlag Set Focus_Mode      To nonfocusable
            Else     Set Focus_Mode      To focusable
        End
        If (Window_Handle(Self)) Move (EnableWindow(Window_Handle(Self),(Not(piShadowState(Self)))))  To iRet
    End_Procedure
        // If somebody likes to get this ShadowState.
    Function Object_Shadow_State Returns Integer
        Function_Return (piShadowState(Self))
    End_Function
        // Also implement the old Shadow_State property, some old code pieces could use
        // it up to now.
    Procedure Set Shadow_State Integer iItem Integer iFlag
        Set Object_Shadow_State To iFlag
    End_Procedure
    Function Shadow_State Integer iItem Returns Integer
        Function_Return (Object_Shadow_State(Self))
    End_Function

    Procedure PaintBackground Handle hDc Integer iTop Integer iLeft Integer iBottom Integer iRight
        Handle hBrush hPen
        Integer iVoid iColor iX iY
        Move (Low(GuiSize(Self))) To iX
        Move (Hi(GuiSize(Self))) To iY
        Move (GetSysColor(clBtnFace Iand $000000FF)) To iColor
        Move (GetStockObject(BLACK_PEN)) To hPen
        Move (CreateSolidBrush(iColor)) To hBrush
//        Move (GetStockObject(NULL_BRUSH)) To hBrush
        Move (SelectObject(hDC, hPen))   To iVoid
        Move (SelectObject(hDC, hBrush)) To iVoid
        Move (Rectangle(hDC, iTop-1, iLeft-1, iBottom+1, iRight+1 )) To iVoid
        Move (DeleteObject(hBrush)) To iVoid
        Integer iRet
        Handle hOldPen

        Move (GetStockObject(WHITE_PEN)) To hPen
        Move (SelectObject(hDc,hPen)) To hOldPen
        //
        Move (movetoexef(hDc,0,0,0)) To iRet
        Move (LineTo(hDc, iX, 0)) To iRet
        //
        Move (movetoexef(hDc,0,0,0)) To iRet
        Move (LineTo(hDc,0, iY )) To iRet
        //
        Move (SelectObject(hDc,hOldPen)) To iRet
        //
        Move (movetoexef(hDc, iX-1,0,0)) To iRet
        Move (LineTo(hDc, iX, iY*2)) To iRet
        //
        Move (movetoexef(hDc, -iX, iY, 0)) To iRet
        Move (LineTo(hDc, iX, iY-1)) To iRet
    End_Procedure

    Procedure PaintLabel Handle hDc Integer iTop Integer iLeft Integer iBottom Integer iRight
        Handle hBrush hPen hFont hOldFont
        Integer iVoid iColor
        Pointer pItemText pRect
        String sItemText  sRect
        ZeroType tRect To sRect
        Put 0    To sRect At tRect.Top
        Put 0   To sRect At tRect.Left
        Put (Hi(GUISIZE(Self))) To sRect At tRect.Bottom
        Put (Low(GUISIZE(Self)))  To sRect At tRect.Right
        GetAddress Of sRect To pRect
        Move ("Hello" + (Character(0)) ) To sItemText
        GetAddress Of sItemText To pItemText
        Move (OemToAnsi(pItemText,pItemText)) To iVoid
        Move (GetStockObject(DEFAULT_GUI_FONT)) To hFont
        Move (SelectObject(hDc,hFont)) To hOldFont
        Move (SetTextColor(hDc,clYellow )) To iVoid
        Move (SetBkColor(hDc,clDkGray)) To iVoid

//        Move (DrawText(hDc,pItemText,((length(sItemText))-1),pRect,(DT_CENTER))) To iVoid
        Move (DrawText(hDc,pItemText,((length(sItemText))-1),pRect,(DT_CENTER Ior DT_VCENTER Ior DT_SINGLELINE))) To iVoid
        Move (SelectObject(hDc,hOldFont)) To iVoid
    End_Procedure

    Procedure PaintSelected Handle hDc Integer iTop Integer iLeft Integer iBottom Integer iRight
        Handle hBrush hPen hFont hOldFont
        Integer iVoid iColor

        Move (GetSysColor(clBtnFace Iand $000000FF)) To iColor
        Move clDkGray To iColor
        Move (GetStockObject(BLACK_PEN)) To hPen

        Move (SelectObject(hdc,GetStockObject(DC_PEN))) To iVoid
        Move (SetDCPenColor(hdc,cldkgray)) To iVoid

        Move (CreateSolidBrush(iColor)) To hBrush
        Move (SelectObject(hDC, hBrush)) To iVoid
        Move (Rectangle(hDC, iTop, iLeft, iBottom, iRight )) To iVoid
        Move (DeleteObject(hBrush)) To iVoid
        //
        Integer iRet
        Handle hOldPen
        Integer iX iY
        Move (Low(GuiSize(Self))) To iX
        Move (Hi(GuiSize(Self))) To iY
        //
        Move (movetoexef(hDc,0,0,0)) To iRet
        Move (LineTo(hDc, iX, 0)) To iRet
        //
        Move (movetoexef(hDc,0,0,0)) To iRet
        Move (LineTo(hDc,0, iY )) To iRet
        //

        Move (GetStockObject(WHITE_PEN)) To hPen
        Move (SelectObject(hDc,hPen)) To hOldPen
        //
        Move (movetoexef(hDc, iX-1,0,0)) To iRet
        Move (LineTo(hDc, iX, iY*2)) To iRet
        //
        Move (movetoexef(hDc, -iX, iY, 0)) To iRet
        Move (LineTo(hDc, iX, iY-1)) To iRet
    End_Procedure


    Procedure WMSG_OnDrawItem Integer wParam Integer lParam
        String sItemStr
        Pointer pItemStr
        Integer iRet
        //
        // Data
        Integer iID iAct iState hWnd hDC iTop iLeft iBottom iRight
        //
        ZeroType DRAWITEMSTRUCT To sItemStr
        GetAddress Of sItemStr To pItemStr
        Move (CopyMemory(pItemStr, lParam, DRAWITEMSTRUCT_SIZE)) To iRet
        GetBuff From sItemStr At DRAWITEMSTRUCT.itemID      To iID
        GetBuff From sItemStr At DRAWITEMSTRUCT.itemAction  To iAct
        GetBuff From sItemStr At DRAWITEMSTRUCT.itemState   To iState
        GetBuff From sItemStr At DRAWITEMSTRUCT.hwndItem    To hWnd
        GetBuff From sItemStr At DRAWITEMSTRUCT.hDC         To hDC
        GetBuff From sItemStr At DRAWITEMSTRUCT.rcItemTop   To iTop
        GetBuff From sItemStr At DRAWITEMSTRUCT.rcItemLeft  To iLeft
        GetBuff From sItemStr At DRAWITEMSTRUCT.rcItemBottom To iBottom
        GetBuff From sItemStr At DRAWITEMSTRUCT.rcItemRight To iRight
        Send PaintBackground hDc iTop iLeft iBottom iRight

        If (iAct=ODA_DRAWENTIRE) Send PaintBackground hDc iTop iLeft iBottom iRight
        If (iAct=ODA_SELECT)     Send PaintSelected   hDc (iTop) (iLeft) (iBottom-1) (iRight-1)//



        If (iState=ODA_DRAWENTIRE  ) Showln "ODA_DRAWENTIRE"
        If (iState=ODA_SELECT      ) Showln "ODA_SELECT"
        If (iState=ODA_FOCUS       ) Showln "ODA_FOCUS"
        If (iState=ODS_SELECTED    ) Showln "ODS_SELECTED"
        If (iState=ODS_GRAYED      ) Showln "ODS_GRAYED"
        If (iState=ODS_DISABLED    ) Showln "ODS_DISABLED"
        If (iState=ODS_CHECKED     ) Showln "ODS_CHECKED"
        If (iState=ODS_FOCUS           ) Send PaintSelected   hDc (iTop) (iLeft) (iBottom-1) (iRight-1)
        If (iState=ODS_DEFAULT         ) Showln "ODS_DEFAULT"
        If (iState=ODS_COMBOBOXEDIT    ) Showln "ODS_COMBOBOXEDIT"
        If (iState=ODS_HOTLIGHT        ) Showln "ODS_HOTLIGHT"
        If (iState=ODS_INACTIVE        ) Showln "ODS_INACTIVE"
        If (iState=ODS_NOACCEL         ) Showln "ODS_NOACCEL"
        If (iState=ODS_NOFOCUSRECT     ) Showln "ODS_NOFOCUSRECT"

        Send PaintLabel hDC iTop iLeft iBottom iRight

    End_Procedure

        // Should allow Bitmaps.
    Procedure Set Bitmap String sBmp
        Handle hBmp
        Integer iRet
        If (piBitmapHandle(Self)) Move (DeleteObject(piBitmapHandle(Self))) To iRet
        Move (LoadBitmap(sBMP,0,0,piTransparentState(Self)))                To hBmp
        Set piBitmapHandle                                                  To hBmp
        If (hBmp) Set psBitmap To sBmp
    End_Procedure
    Function Bitmap Returns String
        Function_Return (psBitmap(Self))
    End_Function
        // Should allow Icons.
    Procedure Set Icon String sIcon
        Handle hBmp
        Integer iRet
        String sFile
        If (piIconHandle(Self)) Move (DeleteObject(piIconHandle(Self))) To iRet
        Move (LoadIcon(sIcon,0,0,piTransparentState(Self)))             To hBmp
        Set piIconHandle                                                To hBmp
        If (hBmp) Set psIcon To sIcon
    End_Procedure
    Function Icon Returns String
        Function_Return (psIcon(Self))
    End_Function
    //
        // Is sent when button is clicked.
    Procedure onClick
    End_Procedure
        // Should send the specific Notification Message.
    Procedure command Integer wPara Integer lPara
        Integer iNotifyCode
        Move (Hi(wPara))    To iNotifyCode
        If iNotifyCode Eq BN_CLICKED Send onClick
    End_Procedure
        // Is sent when the Mouse moves.
    Procedure WMSG_onMouseMove Integer wParam Integer lParam
        Integer iRet
        String sMouse
        Pointer pMouse
        ZeroType cfTRACKMOUSEEVENT        To sMouse
        Put cfTRACKMOUSEEVENT_SIZE        To sMouse At cfTRACKMOUSEEVENT.cbSize
        Put (TME_HOVER Ior TME_LEAVE)     To sMouse At cfTRACKMOUSEEVENT.dwFlags
        Put (Window_Handle(Self))         To sMouse At cfTRACKMOUSEEVENT.hwndTrack
        Put 500                           To sMouse At cfTRACKMOUSEEVENT.dwHoverTime
        GetAddress Of sMouse To pMouse
        Move (TrackMouseEventEf(pMouse)) To iRet
        Set piMouseTracking To True
        Send OnMouseMove wParam lParam
    End_Procedure
    Procedure WMSG_onMouseLeave Integer wParam Integer lParam
        Send OnMouseLeave wParam lParam
    End_Procedure
    Procedure onMouseMove Integer wParam Integer lParam
    End_Procedure
    Procedure onMouseLeave Integer wParam Integer lParam
    End_Procedure
        // Destroy Resources.
    Procedure destroy_object
        Integer iRet
        If (piIconHandle(Self))   Move (DeleteObject(piIconHandle(Self)))     To iRet
        If (piBitmapHandle(Self)) Move (DeleteObject(piBitmapHandle(Self))) To iRet
        Forward Send destroy_object
    End_Procedure
End_Class