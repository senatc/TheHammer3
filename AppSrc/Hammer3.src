Use DFAllEnt.pkg
// Comment out if you want to use codemax
Define TH_SCINTILLA        for 1
//
Use cCJStandardCommandBarSystem.pkg
Register_Object oClientArea
Register_Object oMain
// General
Use TheHammer.h
Use Tools\TH3Workspace.pkg
Use cWorkSpaceHandlerEx.pkg     // Workspace handler (needs to be at the top)
Use cTH_StatusPanel.pkg         // Status panel for batch processing (used in the utilities)
#IFDEF TH_SCINTILLA
Use cSciLexer.pkg               // Scintilla editing control
#ELSE
Use cCodeMax.pkg                // class: cCodeMaxEdit, all definitions for the DLL Control use.
#ENDIF
Use Start_UIExcl.Pkg            // Some abilities to check if another instance of the program is running
Use mExecute.Pkg                // Covers calls to ShellExecute.
Use cSplitterControl.Pkg        // Splitters
Use cDirectorySelector.pkg      // Directory Selection.
Use vWin32fh.pkg
Use cParser.Pkg                 // Parses the Text
Use Bitmaps.pkg                 // Get Bitmaps for Classes
Use DrgNDrop.pkg                // Drag&Drop Handler from Stuart Booth
Use oKeysArray.pkg              // An Array which contains all KeyNames.
Use mWinAPIGetKeyNameText.pkg   // Conversion of VKKeys to ANSI keycodes.
Use cFDFileReader.Pkg           // Reads Field names out of an *.FD file.
// Codemax Editor specific Packages
Use mEditorMacros.pkg
Use mEditorGeneral.Pkg          // General Functions and Definitions as: TabDialog KeyDefinitions, FileOpenDialog
Use cEditorProperties.Pkg       // Contains all Properties which can be Save (SaveIni) and loaded (LoadIni) to disk.
Use THColorer.pkg               // Colorer
Use cCodeTip.Pkg                // Class for CodeTip support
#IFDEF TH_SCINTILLA
Use cSciCodeList.pkg            // Class for Scintilla CodeList support
#ELSE
Use cCodeList.pkg               // Class for CodeList support
#ENDIF
Use oIDETagsArray.pkg           // An Array that contains all the currently existing IDE/DDB/Studio tags (old now, but let's move it in for easy code syncing)
Use TokensList.pkg            // Available DataFlex Commands (up to v18)
Use cEditorEdit.Pkg             // subclasses the cCodeMaxEdit for the use in this editor
Use cEditorEditView.Pkg         // creates a cEditorEdit in itself. (cIconView)
Use cEditorToolView.Pkg         // Standard view for showing others then files in the editor.
Use mUserAndComputerName.pkg    // gsComputerName && gsUserName
Use cCD_Popup.Pkg               // Extends the CD_Client class with general purpose Properties.
Use Tools\WorkSpace.Sl
Use oObjectsMethods.Sl
Use Tools\RegisterCls.dg
Use Tools\EditorCmdLinePara.Sl        // Simple ModalPanel to enter a commandline. Used with get GetCommandLineParameter "Init" to sCmd
Use cDependencyScanner.pkg      // Scans all adjusted filetypes in the current directory for their #include and Use statements.
Use CodeArt.pkg
Use CodePub.pkg
//
Use cMultiOpenDialog.pkg        // Provides and standard OpenDialog with the ability to select multiple files. Added 28.01.2003 BP
Use cDyntabdialog.pkg
Use cFolderTabs.pkg
Use Help_Ids.inc    // Developer should provide this file of help context links.
Use Std_Help.pkg    // Help
Use cExtMenu.pkg    // Allows Bitmaps in Menu!
Use cRPCServer.pkg  // To control from one Editor to another.
Use Tools\findfiles.dg

Object oHtmlHelp is a cHtmlHelp
End_Object

Use cCJSkinFramework.pkg

If (piUseSkins(ghoEditorProperties)) Begin
    Object oSkin is a cCJSkinFramework
       Set psSkinFile to (psCurrentSkinFile(ghoEditorProperties))
       Set psSkinIni to (psCurrentSkinIni(ghoEditorProperties))
    End_Object
End

Object oToolTipController is a cToolTipController
    Move Self to ghoToolTipController
End_Object

// This function returns Current Editor view.
Function GetCurrentEditView Global Returns Integer
    Integer hCl hVw
    Move (oClientArea(oMain(Self))) to hCl
    If (hCl) Begin
       Get Next_Mdi_Dialog of hcl True to hVw // find first view
       While hVw
          If (Active_state(hVw)) Begin
             // if this is the focus view, mark it.
             If (current_scope(desktop)=hVw and View_mode(hVw)<>VIEWMODE_ICONIZE) Begin
                Function_Return (oEdit(hVw))
             End
          End
          Get Next_Mdi_Dialog of hcl False to hVw // find next
       End
    End
End_Function

// A Procedure which assigns a keystring to a menu item (Either PopupMenu or PullDownMenu)
// correspondinf to a CommandID.
Procedure AddKeyStringToMenuItem Integer hoID Integer iItem Integer iCmd
    Integer iPos
    String  sKey sVal
    Get CMCommandToHotKeyStr iCmd to sKey
    If sKey Ne "" If hoID Ne 0 Begin
        Get value of hoID item iItem                to sVal
        Move (Pos("\a",sVal))                       to iPos
        If iPos Eq 0 Move (Pos(Character(9),sVal))  to iPos
        If iPos Gt 0 Move (Left(sVal,iPos-1))       to sVal
        Move (RTrim(sVal))                          to sVal
        Append sVal (Character(9)) sKey
        Set value of hoID item iItem                to sVal
    End
End_Procedure

Procedure AddCJKeyStringToMenuItem Integer hoID Integer iCmd
    String  sKey
    Get CMCommandToHotKeyStr iCmd to sKey
    If sKey Ne "" If hoID Ne 0 ;
        Set psShortcut of hoID to sKey
End_Procedure

Procedure RegisterEditor
	Send AsociateAllFileTypes
	Abort
End_Procedure

If (piWrkSpcRegister(ghoApplication)) Send RegisterEditor

Use proppage.dg

Object oRPCEditorClient is a cRPCClient
    Set psServerName to "EDITOR"
        // Functions which are called in an RPCServer.
    RPC_External_Procedure ExtCAFileOpen String sFileName
    RPC_External_Procedure ExtCANewFile
    Procedure TryToTransferCommandLineParameters
        Handle hwnd
        Move (isServerRunning(Self))    to hwnd
        If hwnd Begin
            If (psWrkSpcOpenFileName(ghoApplication)) Ne "" Begin
                Send WrkSpcDoForAllFiles  to ghoApplication Msg_ExtCAFileOpen Self
//                Send ExtCAFileOpen (psWrkSpcOpenFileName(ghoWorkSpace))
                Abort
            End
            If (piWrkSpcNewFile(ghoApplication)) Begin
                Send ExtCANewFile
                Abort
            End
        End
    End_Procedure
    Send TryToTransferCommandLineParameters
End_Object

Function CreateProgramLabel Global Returns String
    String sRet
    // **WvA: Removed "project part" prefix from caption so that
    // you can see more details when using the Cool tab switch (==Alt+tab)
    //Append sRet gsProjectName " - " gsProgrammname " " gsVerionsNr
    Append sRet CTH_Programm_Name " " CTH_Version_No
    Function_Return sRet
End_Function

Use oEditContextMenu.pkg
Use cTH3Panel.pkg
Use Menu\TH3FileTabContextMenu.mn
Use THCommandBars.pkg
Use THCustomMenu.pkg

Object oMain is a cHammerPanel
    Set Location to 4 3
    Set Size to 300 450
    Set Label                   to (CreateProgramLabel())

        // Added to support Reopen of Files based on Workspace
        // 18.01.01 Bernhard
    Procedure OnWorkspaceChanged
        Set pbWorkspaceChanging to True
        Send ShowWorkspaceInfo to (oClientArea(Self))
        Send ReOpenAllFiles
        Send LoadSettings to oFindFiles
        Set pbWorkspaceChanging to False
        Send RebuildPanes to oToolPane
    End_Procedure
    
        // Added to support Reopen of Files based on Workspace
        // 18.01.01 Bernhard
    Function RequestChangeWorkspace String sWrkSpace Returns Integer
        Integer iRet
        Send CACreateEditorEntries to (oClientArea(Self))
        Get MSG_CACloseAllFiles of (oClientArea(Self)) sWrkSpace to iRet
        If (iRet) Function_Return False
        Function_Return True
    End_Function
    

    // SetRedraw set's the redraw flag of main and oClientArea directly via API
    // if set true, the objects are repainted.
    // 28.02.2003 BP
    Procedure SetRedraw Global Integer iState
        Integer iRet iHideFileTabs iRedrawFlags hoObj
        String sRect
        Pointer pRect
#IFNDEF TH_SCINTILLA
        If iState Eq (piRedrawState(oMain(desktop))) Procedure_Return
        Set piRedrawState of (oMain(desktop)) to iState

        Move (SendMessage(window_handle(oMain(desktop)),WM_SETREDRAW,iState,0)) to iRet
        If (iState) Begin
            Move (RedrawWindow(window_handle(oMain(desktop)),0,0,(RDW_NOCHILDREN ior RDW_ERASE ior RDW_INVALIDATE ior RDW_ERASENOW))) to iRet
            Move (RedrawWindow(window_handle(oMain(desktop)),0,0,(RDW_ALLCHILDREN ior RDW_INVALIDATE ior RDW_UPDATENOW ior RDW_NOFRAME ior RDW_NOERASE))) to iRet
        End
#ENDIF        
    End_Procedure

    Object oParserControl is a cParserControl
        Move (Self) to ghoParserControl
        Procedure destroy_object
            Move 0 to ghoParserControl
            Forward Send destroy_object
        End_Procedure
    End_Object

        // Allows other instances of the Editor to take control over some actions.
    Object oRPCEditorServer is a cRPCServer
        Set ConnectName to "EDITOR"
        RPC_Procedure ExtCAFileOpen String sFileName Integer iLine
            Send CAOpenFile to (oClientArea(Self)) sFileName
        RPC_End_Procedure
        RPC_Procedure ExtCANewFile
            Send CANewFile to (oClientArea(Self))
        RPC_End_Procedure
    End_Object

    #Include RunProgramNotify.inc   // Allows to start the compiler in the background and beeing notified when finished!
    #Include Tools\TH3ToolsPanes.inc
    #Include Tools\oFileFinder.pkg

    Use THCompiler.pkg

    Object oCommandBarSystem is a cTHCJCommandBarSystem
        // The Hammer 3.0 Menu Bar
        Object oMenuBar is a cCJMenuBar
            #Include Menu\TH3MenuFile.mn
            #Include Menu\TH3MenuEdit.mn
            #Include Menu\TH3MenuBuild.mn
            #Include Menu\TH3MenuTools.mn
            #Include Menu\TH3MenuSource.mn
            #Include Menu\TH3MenuDatabase.mn
            #Include Menu\TH3MenuWindow.mn
            #Include Menu\TH3MenuHelp.mn
        End_Object
        // The Hammer 3.0 Tool Bar
        #Include Tools\TH3ToolBar.pkg
        // The Hammer 3.0 Status Bar
        #Include Tools\TH3StatusBar.pkg
        //
    End_Object

    Object oClientArea is a ClientArea
        Property String  psLastCompiledFileName ""
        Property Integer piLastCompiledMode     0
        Property Integer piLastCompiledRun      0
        Property Integer piLastCompileHide      False
        Property Integer piViewsZoomed          (piViewMode(ghoEditorProperties))
        Property Integer piActiveView           0
        //
        Use Menu\TH3EditorContextMenu.mn
        Use Tools\DependencyConf.SL
        Use Tools\TH3WorkspaceConfigure.dg
        Use Tools\oHorizontalSplitter.pkg
        Use Tools\THParameters.dg
        Use Tools\TableProperties.dg
        Use Tools\CustMenu.dg
        Use ThaHammerActions.pkg
        Use dfcbldr.pkg         // Registering classes in the IDE and creating *.DFC files.
        Use Tools\THAbout.dg

    End_Object
    Send Deactivate to (Splash_Screen(Self)) //@
End_Object

Procedure ReOpenAllFiles
    Boolean bExists
    String  sFile sLastEdited
    //
    Integer iFile iFiles
    //
    Indicate MKNoParsing True
    Send SetRedraw to (oClientArea(oMain(Self))) False
    Get psLastEditedFile of ghoEditorProperties to sLastEdited
    //
    Set pbCaptionUpdateState of oMain to False
    Move (SizeOfArray(gtTHWorkspace.saOpened)) to iFiles
    For iFile from 0 to (iFiles-1)
        Move (Trim(gtTHWorkspace.saOpened[iFile])) to sFile
        Get vFilePathExists sFile to bExists
        // If file cannot be found, then do not try to open it again next time.
        If (bExists=False) Begin
            If (Uppercase(sFile)=Uppercase(sLastEdited)) Move "" to sLastEdited
            Send THWS_DeleteOpened sFile
        End
        Else Begin
            If (iFile=(iFiles-1)) Begin
                Indicate MKNoParsing False // ???
                If (sLastEdited="") Set pbCaptionUpdateState of oMain to True
            End
            If ((Uppercase(sFile)<>Uppercase(sLastEdited))or(sLastEdited="")) ;
            Send CAOpenFile to (oClientArea(oMain(Self))) sFile
        End
    Loop
    //
    Set pbCaptionUpdateState of oMain to True
    If (sLastEdited<>"") Send CAOpenFile to (oClientArea(oMain(Self))) sLastEdited
    //
    Send SetRedraw to (oClientArea(oMain(Self))) True
    Indicate MKNoParsing False // ???
End_Procedure

// Added 17.05.01 Bernhard
// Changed 18.05.01 Bernhard
Function RequestChangeWorkSpace String sWorkSpace Returns Integer
    Function_Return (RequestChangeWorkSpace(oMain(Self),sWorkSpace))
End_Procedure
Procedure OnWorkSpaceChanged
    Send THDoReadWorkspace
    Send OnWorkSpaceChanged to (oMain(Self))
    Send OnWorkSpaceChanged to (oIDETagsArray(Self))
End_Procedure
Send OnWorkSpaceChanged

    // Opens a file when -OPEN is given.
If (psWrkSpcOpenFileName(ghoApplication)) Ne "" Send WrkSpcDoForAllFiles  to ghoApplication Msg_CAOpenFile (oClientArea(oMain(Self)))
 //Send CAOpenFile To (oClientArea(oMain(Self))) (psWrkSpcOpenFileName(ghoWorkSpace))

    // Creates an empty file viw on startup when -NEW is given.
If (piWrkSpcNewFile(ghoApplication))            Send CANewFile  to (oClientArea(oMain(Self)))
    // Popups the WorkSpace/ VDF Version ModalPanel when -SETVERSION is given.
If (piWrkSpcSetVersion(ghoApplication)) Begin
    Send Popup      to (oWorkspace(Self))
    Send SaveIni    to ghoEditorProperties
End

If (psVDFRegistryVersion(ghoEditorProperties)) Eq "" Begin
    Send Popup      to (oWorkSpace(Self))
    Send SaveIni    to ghoEditorProperties
End

Start_UI
