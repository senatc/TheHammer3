// cDatabaseTreeView.pkg

Use dfTreeVw.pkg
Use DrgNDrop.pkg
Use cImageList32.pkg

Struct tDBTVFile
    String  sLName
    Integer iFile
End_Struct

Struct tDBClass
    String      sDDClass
    String      sDDFile
End_Struct

Struct tDBDDClasses
    Integer     iTableNo
    String      sTableName
    String      sDDMain
    String      sDDFile
    tDBClass[]  taDDClasses
End_Struct

Struct tTHDDStructures
    Integer     iFile
    Integer[]   iaSaveFiles
    Integer[]   iaDeleteFiles
End_Struct

Define DBTV_SORT_BYNUMBER for 0
Define DBTV_SORT_BYNAME   for 1

Define THDS_SAVE    for 0
Define THDS_DELETE  for 1

Use Menu\DatabaseContextMenu.mn

Class cDatabaseImageList is a cImageList32
    Procedure OnCreate // add the images
        Integer iImage
        Get AddBitmap 'dbTreeView16.bmp' clFuchsia to iImage
    End_Procedure
End_Class

Class cDatabaseTreeView is a TreeView
    
    Procedure Construct_Object
        Forward Send Construct_Object
        Property tDBDDClasses[]     ptDDClasses
        Property tTHDDStructures[]  ptTHDDStructures
        Property Handle[]           phDDOs
        Object oDatabaseImageList   is a cDatabaseImageList
            Set piMaxImages         to 8
        End_Object
        Set ImageListObject         to (oDatabaseImageList(Self))
        Set peAnchors               to anAll
        Set pbEnableInfoTips        to True
        Set piBackColor             to gtColorer[EC_TEXT].iBackC
        Set piTextColor             to gtColorer[EC_TEXT].iForeC
        Set piLineColor             to gtColorer[EC_TEXT].iForeC
    End_Procedure

    Import_Class_Protocol cDragAndDrop_mx

    Procedure Mouse_Down2 Integer iT
        Handle hItem hTable hParent
        String[] saFileName
        String sFile
        Integer iData
        Get CurrentTreeItem to hItem
        If (hItem) Begin
            Get ItemData hItem to hTable
            Get ParentItem hItem to hParent
            If ((hTable)and(hParent=0)) Begin
                Set phTableNumber of (oDatabaseContextMenu(Self)) to hTable
                Set phInvokingObject of (oDatabaseContextMenu(Self)) to (Object_Id(Self))
                Send Popup to (oDatabaseContextMenu(Self))
            End
        End
    End_Procedure

    Function DragAndDrop_DataType Returns String
        Function_Return "DD_CLASS"
    End_Function

    Procedure OnGetInfoTip Handle hItem String ByRef sInfoTip
        Get ItemFullPath hItem to sInfoTip
    End_Procedure  // OnGetInfoTip

    Function FindDDSFile Integer hFile tTHDDStructures[] ByRef ltTHDDStructures Returns Integer
        tTHDDStructures  ltTHDDStructure
        Move hFile to ltTHDDStructure.iFile
        Move (SearchArray(ltTHDDStructure, ltTHDDStructures)) to hFile
        If (hFile<0) Move (SizeOfArray(ltTHDDStructures)) to hFile
        Function_Return hFile
    End_Function

    Function mStructure Handle hTable Integer iType Integer iLevel tTHDDStructures[] ByRef ltTHDDStructures tDBDDClasses[] ByRef ltDDClasses Returns String
        tDBDDClasses ltDDClass
        Integer iIndex iFile iFiles hParent hChild iMain iDDO iDDOs
        String sDDO sParentDDO sChildDDO sTitle
        Handle   lhDDO
        Handle[] lhDDOs
        //
        If (iLevel=0) Set phDDOs to lhDDOs
        Else Get phDDOs to lhDDOs
        //
        Get FindDDSFile hTable (&ltTHDDStructures) to iIndex
        Move ltTHDDStructures[iIndex].iFile to ltDDClass.iTableNo
        Move (SearchArray(ltDDClass, ltDDClasses)) to iMain
        Move ltDDClass.iTableNo to lhDDO
        Move (SearchArray(lhDDO, lhDDOs)) to iDDOs
        If ((iDDOs<0)and(iMain>=0)) Begin
            Move lhDDO to lhDDOs[SizeOfArray(lhDDOs)]
            Set phDDOs to lhDDOs
            If (iLevel=0) Begin
                Move (sTitle+"//"*Repeat("*", 45)+Character(10)) to sTitle
                If (iType=THDS_SAVE) ;
                    Move (sTitle+"// ***** Save Structure for"*ltDDClasses[iMain].sTableName*"table"+Character(10)) to sTitle
                Else ;
                    Move (sTitle+"// ***** Delete Structure for"*ltDDClasses[iMain].sTableName*"table"+Character(10)) to sTitle
                Move (sTitle+"//"*Repeat("*", 45)+Character(10)) to sTitle
            End
            Move (sDDO+"Object" * ltDDClasses[iMain].sTableName + '_DD is a' * ltDDClasses[iMain].sDDMain+Character(10)) to sDDO
            // Save Structure
            Move (SizeOfArray(ltTHDDStructures[iIndex].iaSaveFiles)) to iFiles
            For iFile from 0 to (iFiles-1)
                Move ltTHDDStructures[iIndex].iaSaveFiles[iFile] to hParent
                Move hParent to ltDDClass.iTableNo
                Move (SearchArray(ltDDClass, ltDDClasses)) to iDDO
                If (iDDO>=0) Begin
                    Move (sDDO+"    "+"Set DDO_Server To" * '('+ltDDClasses[iDDO].sTableName + '_DD(Self))'+Character(10)) to sDDO
                    Get mStructure hParent iType (iLevel+1) (&ltTHDDStructures) (&ltDDClasses) to sParentDDO
                    If (sParentDDO<>"") Move (sParentDDO+Character(10)+sDDO) to sDDO
                End
            Loop
            // Delete Structure
            If (iType=THDS_DELETE) Begin
                Move (SizeOfArray(ltTHDDStructures[iIndex].iaDeleteFiles)) to iFiles
                For iFile from 0 to (iFiles-1)
                    Move ltTHDDStructures[iIndex].iaDeleteFiles[iFile] to hChild
                    Move hChild to ltDDClass.iTableNo
                    Move (SearchArray(ltDDClass, ltDDClasses)) to iDDO
                    If (iDDO>=0) Begin
                        Get mStructure hChild iType (iLevel+1) (&ltTHDDStructures) (&ltDDClasses) to sChildDDO
                    End
                Loop
            End
            //
            Move (sDDO+"End_Object //" * ltDDClasses[iMain].sTableName + "_DD" + Character(10)) to sDDO
            //
            If (sChildDDO<>"") Move (sDDO+Character(10)+sChildDDO) to sDDO
            //
            If (iLevel=0) Begin
                Move (sTitle+Character(10)+sDDO+Character(10)) to sDDO
                Move (sDDO+"Set Main_DD To"*'('+ltDDClasses[iMain].sTableName + "_DD(Self))" + Character(10)) to sDDO
                Move (sDDO+"Set Server To"*'('+ltDDClasses[iMain].sTableName + "_DD(Self))" + Character(10)) to sDDO
                //
                Get phDDOs to lhDDOs
                Move (SizeOfArray(lhDDOs)) to iDDOs
                For iDDO from 0 to (iDDOs-1)
                    Move lhDDOs[iDDO] to ltDDClass.iTableNo
                    Move (SearchArray(ltDDClass, ltDDClasses)) to iIndex
                    If (iIndex>=0) Begin
                        If (iDDO=0) Move (Character(10)+sDDO) to sDDO
                        Move ("Use"*ltDDClasses[iIndex].sDDFile+Character(10)+sDDO) to sDDO
                    End
                Loop
            End
        End
        Function_Return sDDO
    End_Procedure

    Function Table_Drop_Data Handle hItem Returns String
        String sData
        Integer iData bOpened hTable iIndex iSegment iSegments iColumn iType
        String sInfoTip sTable sColumn sSegments sFindInit sType
        String sNow
        Sysdate sNow
        //
        Integer iDDO
        tDBDDClasses[]  ltDDClasses
        tDBDDClasses    ltDDClass
        Get ptDDClasses to ltDDClasses
        //
        tTHDDStructures[]   ltTHDDStructures
        Get ptTHDDStructures    to ltTHDDStructures
        //
        Get ItemData hItem to iData
        String sDataPath sFileList
        String sOldDataPath sOldFileList
        Move (CurrentFileListPath(ghoWorkSpaceHandlerEx))   to  sFileList
        Move (CurrentDataPath(ghoWorkSpaceHandlerEx))       to  sDataPath
        Get_FileList                                            sOldFileList
        Get_Attribute DF_OPEN_PATH                          to  sOldDataPath
        If (sFileList<>"") Begin
            Set_Attribute   DF_OPEN_PATH  to (sDataPath+';'+sOldDataPath)
            Set_FileList    sFileList    // Set to the new filelist
        End
        If iData Begin
            Get ItemFullPath hItem to sInfoTip
            If (sInfoTip contains "Indexes") Begin
                Move (hi(idata))  to hTable
                Move (Low(idata)) to iIndex
                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTable
                Get_Attribute DF_FILE_OPENED of hTable to bOpened
                If (not(bOpened)) Open hTable
                If (iIndex<>0) Begin
                    Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments
                    For iSegment from 1 to iSegments
                        Get_Attribute DF_INDEX_SEGMENT_FIELD  of hTable iIndex iSegment to iColumn
                        Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
                        Get_Attribute DF_FIELD_TYPE of hTable iColumn to iType
                        If (sSegments="") Move sColumn to sSegments
                        Else Move (sSegments+','*sColumn) to sSegments
                        Move '""' to sType
                        If (iType=DF_BCD) Move 0 to sType
                        If (iType=DF_DATE) Move ("(Date("+sNow+'))') to sType
                        Move (sFindInit+"//Move"*sType*"To"*sTable+'.'+sColumn+Character(10)) to sFindInit
                    Loop
                    If (not(bOpened)) Close hTable
                    Move ("Index."+String(iIndex)*"//"* sSegments) to sSegments
                End
                Else Begin
                    Move "Recnum" to sSegments
                    Move ("//Move 0 to"*sTable+".Recnum"+Character(10)) to sFindInit
                End
                Move (Character(10)+"Clear"*sTable) to sData
                Move (sData+Character(10)+sFindInit) to sData
                Move (sData+("Find EQ"*sTable*"by"*sSegments)) to sData
                If (not(bOpened)) Close hTable
            End
            Else If (sInfoTip contains "Columns") Begin
                Move (hi(idata)) to hTable
                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTable
                Get_Attribute DF_FILE_OPENED of hTable to bOpened
                If (not(bOpened)) Open hTable
                Get_Attribute DF_FIELD_NAME of hTable (Low(idata)) to sColumn
                Move (Character(10)+sTable+"."+sColumn*'/'+'/'*String(hTable)+'.'+String(Low(idata))) to sData
                If (not(bOpened)) Close hTable
            End
            Else If (sInfoTip contains "Relationships") Begin
                Get_Attribute DF_FILE_LOGICAL_NAME of idata to sTable
                Move (Character(10)+"Relate"*sTable) to sData
            End
            Else If (sInfoTip contains "Data Dictionaries") Begin
                Get_Attribute DF_FILE_LOGICAL_NAME of idata to sTable
                If (sInfoTip contains "[Save Structure]") Begin
                    Get mStructure idata THDS_SAVE 0 (&ltTHDDStructures) (&ltDDClasses) to sData
                End
                Else If (sInfoTip contains "[Delete Structure]") Begin
                    Get mStructure idata THDS_DELETE 0 (&ltTHDDStructures) (&ltDDClasses) to sData
                End
                Else Begin
                    Move iData to ltDDClass.iTableNo
                    Move (SearchArray(ltDDClass, ltDDClasses)) to iDDO
                    If (iDDO>=0) Begin
                        Move (Character(10)+"Use" * ltDDClasses[iDDO].sDDFile) to sData
                        Move (sData + Character(10)+"Object"*sTable+'_DD is a' * ltDDClasses[iDDO].sDDMain) to sData
                        Move (sData + Character(10)+ "End_Object //" * sTable + "_DD"+Character(10)) to sData
                    End
                End
            End
            Else Begin
                Get_Attribute DF_FILE_LOGICAL_NAME of idata to sTable
                Move (Character(10)+"Open"*sTable) to sData
            End
        End
        Set_FileList                    sOldFileList
        Set_Attribute DF_OPEN_PATH  to  sOldDataPath
        Function_Return sData
    End_Function
    
    // Can copy items data
    Procedure Copy
        Handle hItem
        Get CurrentTreeItem to hItem
        Direct_Output "clipboard:"
        Write (Table_Drop_Data(Self, hItem))
        Close_Output
    End_Procedure
    Function CanCopy Returns Integer
        Handle hItem
        Integer iData
        Get CurrentTreeItem to hItem
        If (hItem) Get ItemData hItem to iData
        Function_Return iData
    End_Function
    
    Function DragAndDrop_GetData Returns String
        Function_Return (Table_Drop_Data(Self, CurrentTreeItem(Self)))
    End_Function

    Function Column_Type Integer iType Returns String
        Case Begin
            Case (iType = DF_ASCII)
                Function_Return "ASC"
            Case (iType = DF_BCD)
                Function_Return "NUM"
            Case (iType = DF_DATE)
                Function_Return "DAT"
            Case (iType = DF_OVERLAP)
                Function_Return "OVL"
            Case (iType = DF_TEXT)
                Function_Return "TXT"
            Case (iType = DF_BINARY)
                Function_Return "BIN"
        Case End
        Function_Return "???"
    End_Function

    Function IsTableNumber String sFilter Returns Integer
        Integer iChar
        String sChar
        For iChar from 1 to (Length(sFilter))
            Move (Mid(sFilter, 1, iChar)) to sChar
            If (not("0123456789" contains sChar)) Function_Return 0
        Loop
        Function_Return sFilter
    End_Function

    Procedure ReopenFiles
        Open VDFCLS 
        Open SYSFILE
        Open VDFPROP
        Open ASDB   
        Open VDFPRNT
    End_Procedure

    Procedure LoadTablesList Integer iSortBy String sFilter
        Handle              hTable hParentFile hParentField iRecnum
        Handle              hRoot hColumns hColumn hIndexes hIndex hSegment hLink hLinks
        Handle              hDDOs hDD hoClient
        String              sTable sDisplay sColumn sType sLength sParentFile sParentField sTblNo
        Integer             iColumn iColumns bOpened bParent iType iLength iPrecision iData
        Integer             iIndex iIndexes iSegment iSegments iLink iLinks iDDOs iDD
        Integer             iTables iTable iDDS iMainFile iParentFile
        String[]            laLinks laDummy
        tDBTVFile[]         latDBTVFile
        tDBDDClasses[]      ltDDClasses
        tTHDDStructures[]   ltTHDDStructures
        tDBDDClasses        ltDDClass
        //
        String sDataPath sFileList
        String sOldDataPath sOldFileList
        //
        Get Client_Id to hoClient
        Send LoadDDClassList of hoClient (&ltDDClasses)
        Set ptDDClasses to ltDDClasses
        //
        Move (CurrentFileListPath(ghoWorkSpaceHandlerEx))   to  sFileList
        Move (CurrentDataPath(ghoWorkSpaceHandlerEx))       to  sDataPath
        Get_FileList                                            sOldFileList
        Get_Attribute DF_OPEN_PATH                          to  sOldDataPath
        If (sFileList<>"") Begin
            Set_Attribute   DF_OPEN_PATH  to (sDataPath+';'+sOldDataPath)
            Set_FileList    sFileList    // Set to the new filelist
        End
        //
        Send ClearAll
        Move (Trim(Uppercase(sFilter))) to sFilter
        // Collect Database Files
        Move 0 to hTable
        Repeat
            Get_Attribute DF_FILE_NEXT_USED of hTable to hTable
            If (hTable > 0) Begin
                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTable
                If ((Uppercase(sTable) contains sFilter)or(sFilter="")or(IsTableNumber(Self, sFilter)=hTable)) Begin
                    Move (SizeOfArray(latDBTVFile)) to iTables
                    Move hTable to latDBTVFile[iTables].iFile
                    Move (Uppercase(sTable)) to latDBTVFile[iTables].sLName
                End
            End
        Until (hTable = 0)
        Move (SizeOfArray(latDBTVFile)) to  iTables
        If (iTables=0) Begin
            Set_FileList                    sOldFileList
            Set_Attribute DF_OPEN_PATH  to  sOldDataPath
            Procedure_Return
        End
        //
        Close DF_ALL
        //
        If ((iSortBy=DBTV_SORT_BYNAME)and(iTables>1)) begin
            Move (SortArray(latDBTVFile)) to latDBTVFile
        end
        // Output
        For iTable from 0 to (iTables-1)
            Move latDBTVFile[iTable].iFile to hTable
            If (hTable > 0) Begin
                Move laDummy to laLinks
                // Tables
                Get_Attribute DF_FILE_LOGICAL_NAME of hTable to sTable
                If (Uppercase(sTable)<>"FLEXERRS") Begin
                    Get FindDDSFile hTable (&ltTHDDStructures) to iMainFile
                    Move hTable to ltTHDDStructures[iMainFile].iFile
                    Get_Attribute DF_FILE_DISPLAY_NAME of hTable to sDisplay
                    Move (Right("0000"+String(hTable), 4)) to sTblNo
                    If (iSortBy=DBTV_SORT_BYNAME) Get AddTreeItem (sTable*'['+String(hTable)+','*sDisplay+']') 0 0 0 0 to hRoot
                    Else Get AddTreeItem (sTblNo*'-'*sTable*'['+sDisplay+']') 0 0 0 0 to hRoot
                    Set ItemData hRoot to hTable
                    //
                    Get_Attribute DF_FILE_OPENED of hTable to bOpened
                    Send Ignore_Error of Error_Info_Object 75
                    If (not(bOpened)) Open hTable
                    Send Trap_Error of Error_Info_Object 75
                    Get_Attribute DF_FILE_OPENED of hTable to bOpened
                    If (bOpened) Begin
                        Get_Attribute DF_FILE_RECNUM_TABLE of hTable to iRecnum
                        // Columns
                        Get AddTreeItem "Columns" hRoot 0 1 1 to hColumns
                        Get_Attribute DF_FILE_NUMBER_FIELDS of hTable to iColumns
                        For iColumn from 1 to iColumns
                            Get_Attribute DF_FIELD_NAME             of hTable iColumn to sColumn
                            Get_Attribute DF_FIELD_TYPE             of hTable iColumn to iType
                            Get_Attribute DF_FIELD_LENGTH           of hTable iColumn to iLength
                            Get_Attribute DF_FIELD_PRECISION        of hTable iColumn to iPrecision
                            Get_Attribute DF_FIELD_RELATED_FILE     of hTable iColumn to hParentFile
                            Get_Attribute DF_FIELD_RELATED_FIELD    of hTable iColumn to hParentField
                            Move iLength to sLength
                            If iPrecision Move (sLength+'.'+String(iPrecision)) to sLength
                            Get Column_Type iType to sType
                            If (iType=DF_DATE) Move "" to sLength
                            Get AddTreeItem (sColumn*'('+sType+sLength+')') hColumns 0 2 2 to hColumn
                            Move (65536 * hTable + iColumn) to iData
                            Set ItemData hColumn to iData
                            If (hParentFile+hParentField) Begin
                                Get FindDDSFile hParentFile (&ltTHDDStructures) to iParentFile
                                Move hParentFile to ltTHDDStructures[iParentFile].iFile
                                Move hParentFile to ltTHDDStructures[iMainFile].iaSaveFiles[SizeOfArray(ltTHDDStructures[iMainFile].iaSaveFiles)]
                                //
                                Move hTable      to ltTHDDStructures[iParentFile].iaDeleteFiles[SizeOfArray(ltTHDDStructures[iParentFile].iaDeleteFiles)]
                                //
                                Get_Attribute DF_FILE_OPENED of hParentFile to bParent
                                Send Ignore_Error of Error_Info_Object 75
                                If (not(bParent)) Open hParentFile
                                Send Trap_Error of Error_Info_Object 75
                                Get_Attribute DF_FILE_OPENED of hParentFile to bParent
                                Get_Attribute DF_FILE_LOGICAL_NAME of hParentFile to sParentFile
                                If (bParent) Begin
                                  Get_Attribute DF_FIELD_NAME of hParentFile hParentField to sParentField
                                End
                                Else Move ("FIELD"+Trim(hParentField)) to sParentField
                                Move (sTable+'.'+sColumn+' > '+sParentFile+'.'+sParentField) to laLinks[SizeOfArray(laLinks)]
                                If (not(bParent)) Close hParentFile
                            End
                        Loop
                        // Indexes
                        Get AddTreeItem "Indexes" hRoot 0 3 3 to hIndexes
                        If iRecnum Begin
                            Get AddTreeItem "Recnum" hIndexes 0 4 4 to hIndex
                            Move (65536 * hTable + 0) to iData
                            Set ItemData hIndex to iData
                        End
                        Get_Attribute DF_FILE_LAST_INDEX_NUMBER of hTable to iIndexes
                        For iIndex from 1 to iIndexes
                            Get_Attribute DF_INDEX_NUMBER_SEGMENTS of hTable iIndex to iSegments
                            Get AddTreeItem ("Index."+String(iIndex)) hIndexes 0 4 4 to hIndex
                            Move (65536 * hTable + iIndex) to iData
                            Set ItemData hIndex to iData
                            For iSegment from 1 to iSegments
                                Get_Attribute DF_INDEX_SEGMENT_FIELD  of hTable iIndex iSegment to iColumn
                                Get_Attribute DF_FIELD_NAME of hTable iColumn to sColumn
                                Get AddTreeItem sColumn hIndex 0 2 2 to hColumn
                                Set ItemData hColumn to iData
                            Loop
                        Loop
                        // Links
                        Get AddTreeItem "Relationships" hRoot 0 5 5 to hLinks
                        Move (SizeOfArray(laLinks)-1) to iLinks
                        For iLink from 0 to iLinks
                            Get AddTreeItem laLinks[iLink] hLinks 0 6 6 to hColumn
                            Set ItemData hColumn to hTable
                        Loop
                        // DDOs
                        Get AddTreeItem "Data Dictionaries" hRoot 0 7 7 to hDDOs
                        Move hTable to ltDDClass.iTableNo
                        Move (SearchArray(ltDDClass, ltDDClasses)) to iDDS
                        If (iDDS>=0) Begin
                            Get AddTreeItem "[Save Structure]" hDDOs 0 9 9 to hDD
                            Set ItemData hDD to hTable
                            Get AddTreeItem "[Delete Structure]" hDDOs 0 10 10 to hDD
                            Set ItemData hDD to hTable
                            Move (SizeOfArray(ltDDClasses[iDDS].taDDClasses)) to iDDOs
                            For iDD from 0 to (iDDOs-1)
                                Get AddTreeItem ltDDClasses[iDDS].taDDClasses[iDD].sDDClass hDDOs 0 8 8 to hDD
                                Set ItemData hDD to hTable
                            Loop
                        End
                    End
                    Else Begin
                        Get AddTreeItem "File open Error" hRoot 0 1 1 to hColumns
                    End
                    //
                End // FLEXERRS exclude
            End
        Loop
        //
        Set_FileList                    sOldFileList
        Set_Attribute DF_OPEN_PATH  to  sOldDataPath
        //
        Send ReopenFiles
        //
        Set ptTHDDStructures to ltTHDDStructures
        //
    End_Procedure

    Procedure OnCreateTree
        Send LoadTablesList DBTV_SORT_BYNUMBER ""
    End_Procedure

End_Class

